{"version":3,"names":[],"mappings":"","sources":["gchart_renderers.js"],"sourcesContent":["(function() {\n    var callWithJQuery;\n\n    callWithJQuery = function(factory) {\n        if (typeof exports === \"object\" && typeof module === \"object\") {\n            return factory(require(\"jquery\"));\n        } else if (typeof define === \"function\" && define.amd) {\n            return define([\"jquery\"], factory);\n        } else {\n            if (window.ngRNDR === undefined) {\n                window.ngRNDR = {};\n                if (window.ngRNDR.plugins === undefined) {\n                    window.ngRNDR.plugins = {};\n                    if (window.ngRNDR.plugins.renderers === undefined) {\n                        window.ngRNDR.plugins.renderers = {};\n                    }\n                }\n            }\n            window.ngRNDR.plugins.renderers = $.extend({}, window.ngRNDR.plugins.renderers, factory(jQuery));\n            return window.ngRNDR.plugins.renderers;\n        }\n    };\n\n    callWithJQuery(function($) {\n        var gchart_renderers, makeGoogleChart;\n        makeGoogleChart = function(chartType, extraOptions) {\n            return function(pivotData, opts) {\n                var agg, base, base1, colKey, colKeys, dataArray, dataTable, defaults, fullAggName, groupByTitle, h, hAxisTitle, headers, i, j, len, len1, numCharsInHAxis, options, ref, result, returnObject, row, rowKey, rowKeys, title, tree2, vAxisTitle, val, wrapper, x, y;\n                defaults = {\n                    localeStrings: {\n                        vs: \"vs\",\n                        by: \"by\"\n                    },\n                    gchart: {}\n                };\n                opts = $.extend(true, defaults, opts);\n                opts.gchart.height = opts.height + opts.heightOffset;\n                opts.gchart.width = opts.width + opts.widthOffset;\n                if ((base = opts.gchart).width == null) {\n                    base.width = window.innerWidth / 1.4;\n                }\n                if ((base1 = opts.gchart).height == null) {\n                    base1.height = window.innerHeight / 1.4;\n                }\n                rowKeys = pivotData.getRowKeys();\n                if (rowKeys.length === 0) {\n                    rowKeys.push([]);\n                }\n                colKeys = pivotData.getColKeys();\n                if (colKeys.length === 0) {\n                    colKeys.push([]);\n                }\n                fullAggName = pivotData.meta.aggregatorName;\n                if (pivotData.meta.valAttrs.length) {\n                    fullAggName += \"(\" + (pivotData.meta.valAttrs.join(\", \")) + \")\";\n                }\n                headers = (function() {\n                    var i, len, results;\n                    results = [];\n                    for (i = 0, len = rowKeys.length; i < len; i++) {\n                        h = rowKeys[i];\n                        results.push(h.join(\"-\"));\n                    }\n                    return results;\n                })();\n                headers.unshift(\"\");\n                numCharsInHAxis = 0;\n                if (chartType === \"ScatterChart\") {\n                    dataArray = [];\n                    ref = pivotData.meta.tree;\n                    for (y in ref) {\n                        tree2 = ref[y];\n                        for (x in tree2) {\n                            agg = tree2[x];\n                            dataArray.push([parseFloat(x), parseFloat(y), fullAggName + \": \\n\" + agg.format(agg.value())]);\n                        }\n                    }\n                    dataTable = new google.visualization.DataTable();\n                    dataTable.addColumn('number', pivotData.meta.colAttrs.join(\"-\"));\n                    dataTable.addColumn('number', pivotData.meta.rowAttrs.join(\"-\"));\n                    dataTable.addColumn({\n                        type: \"string\",\n                        role: \"tooltip\"\n                    });\n                    dataTable.addRows(dataArray);\n                    hAxisTitle = pivotData.meta.colAttrs.join(\"-\");\n                    vAxisTitle = pivotData.meta.rowAttrs.join(\"-\");\n                    title = \"\";\n                } else {\n                    dataArray = [headers];\n                    for (i = 0, len = colKeys.length; i < len; i++) {\n                        colKey = colKeys[i];\n                        row = [colKey.join(\"-\")];\n                        numCharsInHAxis += row[0].length;\n                        for (j = 0, len1 = rowKeys.length; j < len1; j++) {\n                            rowKey = rowKeys[j];\n                            agg = pivotData.getAggregator(rowKey, colKey);\n                            if (agg.value() != null) {\n                                val = agg.value();\n                                if ($.isNumeric(val)) {\n                                    if (val < 1) {\n                                        row.push(parseFloat(val.toPrecision(3)));\n                                    } else {\n                                        row.push(parseFloat(val.toFixed(3)));\n                                    }\n                                } else {\n                                    row.push(val);\n                                }\n                            } else {\n                                row.push(null);\n                            }\n                        }\n                        dataArray.push(row);\n                    }\n                    dataTable = google.visualization.arrayToDataTable(dataArray);\n                    title = vAxisTitle = fullAggName;\n                    hAxisTitle = pivotData.meta.colAttrs.join(\"-\");\n                    if (hAxisTitle !== \"\") {\n                        title += \" \" + opts.localeStrings.vs + \" \" + hAxisTitle;\n                    }\n                    groupByTitle = pivotData.meta.rowAttrs.join(\"-\");\n                    if (groupByTitle !== \"\") {\n                        title += \" \" + opts.localeStrings.by + \" \" + groupByTitle;\n                    }\n                }\n                options = {\n                    title: title,\n                    hAxis: {\n                        title: hAxisTitle,\n                        slantedText: numCharsInHAxis > 50\n                    },\n                    vAxis: {\n                        title: vAxisTitle\n                    },\n                    tooltip: {\n                        textStyle: {\n                            fontName: 'Arial',\n                            fontSize: 12\n                        }\n                    },\n                    chartArea: {\n                        'width': '80%',\n                        'height': '80%'\n                    }\n                };\n                if (chartType === \"ColumnChart\") {\n                    options.vAxis.minValue = 0;\n                }\n                if (chartType === \"ScatterChart\") {\n                    options.legend = {\n                        position: \"none\"\n                    };\n                } else if (dataArray[0].length === 2 && dataArray[0][1] === \"\") {\n                    options.legend = {\n                        position: \"none\"\n                    };\n                }\n                $.extend(options, opts.gchart, extraOptions);\n                result = $(\"<div>\").css({\n                    width: opts.gchart.width,\n                    height: opts.gchart.height\n                });\n                wrapper = new google.visualization.ChartWrapper({\n                    dataTable: dataTable,\n                    chartType: chartType,\n                    options: options\n                });\n                wrapper.draw(result[0]);\n                result.bind(\"dblclick\", function() {\n                    var editor;\n                    editor = new google.visualization.ChartEditor();\n                    google.visualization.events.addListener(editor, 'ok', function() {\n                        return editor.getChartWrapper().draw(result[0]);\n                    });\n                    return editor.openDialog(wrapper);\n                });\n                return returnObject = {\n                    html: result\n                };\n            };\n        };\n        return gchart_renderers = {\n            \"Line Chart\": makeGoogleChart(\"LineChart\"),\n            \"Bar Chart\": makeGoogleChart(\"ColumnChart\"),\n            \"Stacked Bar Chart\": makeGoogleChart(\"ColumnChart\", {\n                isStacked: true\n            }),\n            \"Area Chart\": makeGoogleChart(\"AreaChart\", {\n                isStacked: true\n            }),\n            \"Scatter Chart\": makeGoogleChart(\"ScatterChart\")\n        };\n    });\n\n}).call(this);\n\n//# sourceMappingURL=gchart_renderers.js.map\n"],"file":"gchart_renderers.js"}