{"version":3,"names":[],"mappings":"","sources":["datatables_renderers.js"],"sourcesContent":["(function() {\n    var callWithJQuery,\n        hasProp = {}.hasOwnProperty;\n\n    callWithJQuery = function(factory) {\n        if (typeof exports === \"object\" && typeof module === \"object\") {\n            return factory(require(\"jquery\"));\n        } else if (typeof define === \"function\" && define.amd) {\n            return define([\"jquery\"], factory);\n        } else {\n            if (window.ngRNDR === undefined) {\n                window.ngRNDR = {};\n                if (window.ngRNDR.plugins === undefined) {\n                    window.ngRNDR.plugins = {};\n                    if (window.ngRNDR.plugins.renderers === undefined) {\n                        window.ngRNDR.plugins.renderers = {};\n                    }\n                }\n            }\n            window.ngRNDR.plugins.renderers = $.extend({}, window.ngRNDR.plugins.renderers, factory(jQuery));\n            return window.ngRNDR.plugins.renderers;\n        }\n    };\n\n    callWithJQuery(function($) {\n        var datatable, datatables_renderers;\n        datatable = function(pivotData, opts) {\n            var aggregator, c, colAttrs, colKey, colKeys, defaults, i, j, r, result, rowAttrs, rowKey, rowKeys, spanSize, tbody, td, tfoot, th, thead, totalAggregator, tr, txt, val, x;\n            defaults = {\n                localeStrings: {\n                    totals: \"Totals\"\n                }\n            };\n            opts = $.extend(defaults, opts);\n            colAttrs = pivotData.meta.colAttrs;\n            rowAttrs = pivotData.meta.rowAttrs;\n            rowKeys = pivotData.getRowKeys();\n            colKeys = pivotData.getColKeys();\n            result = document.createElement(\"table\");\n            $(result).width(opts.width + opts.widthOffset);\n            result.className = opts[\"class\"].join(\" \");\n            thead = document.createElement(\"thead\");\n            tbody = document.createElement(\"tbody\");\n            tfoot = document.createElement(\"tfoot\");\n            spanSize = function(arr, i, j) {\n                var k, l, len, noDraw, ref, ref1, stop, x;\n                if (i !== 0) {\n                    noDraw = true;\n                    for (x = k = 0, ref = j; 0 <= ref ? k <= ref : k >= ref; x = 0 <= ref ? ++k : --k) {\n                        if (arr[i - 1][x] !== arr[i][x]) {\n                            noDraw = false;\n                        }\n                    }\n                    if (noDraw) {\n                        return -1;\n                    }\n                }\n                len = 0;\n                while (i + len < arr.length) {\n                    stop = false;\n                    for (x = l = 0, ref1 = j; 0 <= ref1 ? l <= ref1 : l >= ref1; x = 0 <= ref1 ? ++l : --l) {\n                        if (arr[i][x] !== arr[i + len][x]) {\n                            stop = true;\n                        }\n                    }\n                    if (stop) {\n                        break;\n                    }\n                    len++;\n                }\n                return len;\n            };\n            for (j in colAttrs) {\n                if (!hasProp.call(colAttrs, j)) continue;\n                c = colAttrs[j];\n                tr = document.createElement(\"tr\");\n                if (parseInt(j) === 0 && rowAttrs.length !== 0) {\n                    th = document.createElement(\"th\");\n                    th.setAttribute(\"colspan\", rowAttrs.length);\n                    th.setAttribute(\"rowspan\", colAttrs.length);\n                    tr.appendChild(th);\n                }\n                th = document.createElement(\"th\");\n                th.className = \"pvtAxisLabel\";\n                $(th).css(\"white-space\", \"nowrap\");\n                th.innerHTML = c;\n                tr.appendChild(th);\n                for (i in colKeys) {\n                    if (!hasProp.call(colKeys, i)) continue;\n                    colKey = colKeys[i];\n                    x = spanSize(colKeys, parseInt(i), parseInt(j));\n                    if (x !== -1) {\n                        th = document.createElement(\"th\");\n                        $(th).off('dblclick').on('dblclick', function(event) {\n                            var e;\n                            e = $.Event(\"colLabelDrillDownEvent\", {\n                                event: event,\n                                renderingEngineId: opts.renderingEngineId\n                            });\n                            return $(window).trigger(e);\n                        });\n                        th.className = \"pvtColLabel\";\n                        th.innerHTML = colKey[j];\n                        th.setAttribute(\"colspan\", x);\n                        if (parseInt(j) === colAttrs.length - 1 && rowAttrs.length !== 0) {\n                            th.setAttribute(\"rowspan\", 2);\n                        }\n                        tr.appendChild(th);\n                    }\n                }\n                if (parseInt(j) === 0) {\n                    th = document.createElement(\"th\");\n                    th.className = \"pvtTotalLabel\";\n                    th.innerHTML = opts.localeStrings.totals;\n                    th.setAttribute(\"rowspan\", colAttrs.length + (rowAttrs.length === 0 ? 0 : 1));\n                    tr.appendChild(th);\n                }\n                thead.appendChild(tr);\n            }\n            if (rowAttrs.length !== 0) {\n                tr = document.createElement(\"tr\");\n                for (i in rowAttrs) {\n                    if (!hasProp.call(rowAttrs, i)) continue;\n                    r = rowAttrs[i];\n                    th = document.createElement(\"th\");\n                    $(th).css(\"white-space\", \"nowrap\");\n                    th.className = \"pvtAxisLabel\";\n                    th.innerHTML = r;\n                    tr.appendChild(th);\n                }\n                th = document.createElement(\"th\");\n                if (colAttrs.length === 0) {\n                    th.className = \"pvtTotalLabel\";\n                    th.innerHTML = opts.localeStrings.totals;\n                }\n                tr.appendChild(th);\n                thead.appendChild(tr);\n            }\n            for (i in rowKeys) {\n                if (!hasProp.call(rowKeys, i)) continue;\n                rowKey = rowKeys[i];\n                tr = document.createElement(\"tr\");\n                for (j in rowKey) {\n                    if (!hasProp.call(rowKey, j)) continue;\n                    txt = rowKey[j];\n                    th = document.createElement('th');\n                    $(th).css(\"white-space\", \"nowrap\");\n                    $(th).off('dblclick').on('dblclick', function(event) {\n                        var e;\n                        e = $.Event(\"rowLabelDrillDownEvent\", {\n                            event: event,\n                            renderingEngineId: opts.renderingEngineId\n                        });\n                        return $(window).trigger(e);\n                    });\n                    th.className = 'pvtRowLabel';\n                    th.innerHTML = txt;\n                    tr.appendChild(th);\n                    if (parseInt(j) === rowAttrs.length - 1 && colAttrs.length !== 0) {\n                        tr.appendChild(document.createElement('th'));\n                    }\n                }\n                for (j in colKeys) {\n                    if (!hasProp.call(colKeys, j)) continue;\n                    colKey = colKeys[j];\n                    aggregator = pivotData.getAggregator(rowKey, colKey);\n                    val = aggregator.value();\n                    td = document.createElement(\"td\");\n                    td.className = \"pvtVal row\" + i + \" col\" + j;\n                    td.innerHTML = aggregator.format(val);\n                    td.setAttribute(\"data-value\", val);\n                    tr.appendChild(td);\n                }\n                totalAggregator = pivotData.getAggregator(rowKey, []);\n                val = totalAggregator.value();\n                td = document.createElement(\"td\");\n                td.className = \"pvtTotal rowTotal\";\n                td.innerHTML = totalAggregator.format(val);\n                td.setAttribute(\"data-value\", val);\n                td.setAttribute(\"data-for\", \"row\" + i);\n                tr.appendChild(td);\n                tbody.appendChild(tr);\n            }\n            tr = document.createElement(\"tr\");\n            th = document.createElement(\"th\");\n            th.className = \"pvtTotalLabel\";\n            th.innerHTML = opts.localeStrings.totals;\n            th.setAttribute(\"colspan\", rowAttrs.length + (colAttrs.length === 0 ? 0 : 1));\n            tr.appendChild(th);\n            for (j in colKeys) {\n                if (!hasProp.call(colKeys, j)) continue;\n                colKey = colKeys[j];\n                totalAggregator = pivotData.getAggregator([], colKey);\n                val = totalAggregator.value();\n                td = document.createElement(\"td\");\n                td.className = \"pvtTotal colTotal\";\n                td.innerHTML = totalAggregator.format(val);\n                td.setAttribute(\"data-value\", val);\n                td.setAttribute(\"data-for\", \"col\" + j);\n                tr.appendChild(td);\n            }\n            totalAggregator = pivotData.getAggregator([], []);\n            val = totalAggregator.value();\n            td = document.createElement('td');\n            td.className = 'pvtGrandTotal';\n            td.innerHTML = totalAggregator.format(val);\n            td.setAttribute(\"data-value\", val);\n            tr.appendChild(td);\n            result.appendChild(thead);\n            result.appendChild(tbody);\n            tfoot.appendChild(tr);\n            result.appendChild(tfoot);\n            result.setAttribute(\"data-numrows\", rowKeys.length);\n            result.setAttribute(\"data-numcols\", colKeys.length);\n            result.setAttribute(\"data-numcolattrs\", colAttrs.length);\n            result.setAttribute(\"data-numrowattrs\", rowAttrs.length);\n\n            return result;\n        };\n        $.fn.finalize = function(opts) {\n            var numCols, numFixedLeftCols, numRows, postRenderOpts, returnObject;\n            numRows = this.data(\"numrowattrs\");\n            numCols = this.data(\"numcolattrs\");\n            numFixedLeftCols = numRows;\n            if (numCols > 0) {\n                numFixedLeftCols = numFixedLeftCols + 1;\n            }\n            postRenderOpts = {\n                scrollY: opts.height + opts.heightOffset - ((numCols + 1) * 30),\n                fixedColumns: {\n                    leftColumns: numFixedLeftCols,\n                    rightColumns: 1\n                },\n                scrollX: true,\n                scrollCollapse: true,\n                paging: false,\n                keys: true,\n                dom: 'Bfrtip',\n                buttons: ['csvHtml5', 'pdfHtml5', 'print']\n            };\n            if (numRows !== 0 || numCols !== 0) {\n                return returnObject = {\n                    html: this.width('100%'),\n                    type: 'datatables',\n                    postRenderOpts: postRenderOpts,\n                    postRenderFunction: function(html, opts) {\n                        $(html).DataTable(opts);\n                    }\n                };\n            }\n            return returnObject = {\n                html: this,\n                type: 'datatables'\n            };\n        };\n\n        /*\n        Heatmap post-processing\n         */\n        $.fn.heatmap = function(scope, opts) {\n            var colorScaleGenerator, heatmapper, i, j, l, n, numCols, numRows, ref, ref1, ref2;\n            if (scope == null) {\n                scope = \"heatmap\";\n            }\n            numRows = this.data(\"numrows\");\n            numCols = this.data(\"numcols\");\n            colorScaleGenerator = opts != null ? (ref = opts.heatmap) != null ? ref.colorScaleGenerator : void 0 : void 0;\n            if (colorScaleGenerator == null) {\n                colorScaleGenerator = function(values) {\n                    var max, min;\n                    min = Math.min.apply(Math, values);\n                    max = Math.max.apply(Math, values);\n                    return function(x) {\n                        var nonRed;\n                        nonRed = 255 - Math.round(255 * (x - min) / (max - min));\n                        return \"rgb(255,\" + nonRed + \",\" + nonRed + \")\";\n                    };\n                };\n            }\n            heatmapper = (function(_this) {\n                return function(scope) {\n                    var colorScale, forEachCell, values;\n                    forEachCell = function(f) {\n                        return _this.find(scope).each(function() {\n                            var x;\n                            x = $(this).data(\"value\");\n                            if ((x != null) && isFinite(x)) {\n                                return f(x, $(this));\n                            }\n                        });\n                    };\n                    values = [];\n                    forEachCell(function(x) {\n                        return values.push(x);\n                    });\n                    colorScale = colorScaleGenerator(values);\n                    return forEachCell(function(x, elem) {\n                        return elem.css(\"background-color\", colorScale(x));\n                    });\n                };\n            })(this);\n            switch (scope) {\n                case \"heatmap\":\n                    heatmapper(\".pvtVal\");\n                    break;\n                case \"rowheatmap\":\n                    for (i = l = 0, ref1 = numRows; 0 <= ref1 ? l < ref1 : l > ref1; i = 0 <= ref1 ? ++l : --l) {\n                        heatmapper(\".pvtVal.row\" + i);\n                    }\n                    break;\n                case \"colheatmap\":\n                    for (j = n = 0, ref2 = numCols; 0 <= ref2 ? n < ref2 : n > ref2; j = 0 <= ref2 ? ++n : --n) {\n                        heatmapper(\".pvtVal.col\" + j);\n                    }\n            }\n            heatmapper(\".pvtTotal.rowTotal\");\n            heatmapper(\".pvtTotal.colTotal\");\n            return this;\n        };\n\n        /*\n        Barchart post-processing\n         */\n        $.fn.barchart = function() {\n            var barcharter, i, k, numCols, numRows, ref;\n            numRows = this.data(\"numrows\");\n            numCols = this.data(\"numcols\");\n            barcharter = (function(_this) {\n                return function(scope) {\n                    var forEachCell, max, scaler, values;\n                    forEachCell = function(f) {\n                        return _this.find(scope).each(function() {\n                            var x;\n                            x = $(this).data(\"value\");\n                            if ((x != null) && isFinite(x)) {\n                                return f(x, $(this));\n                            }\n                        });\n                    };\n                    values = [];\n                    forEachCell(function(x) {\n                        return values.push(x);\n                    });\n                    max = Math.max.apply(Math, values);\n                    scaler = function(x) {\n                        return 100 * x / (1.4 * max);\n                    };\n                    return forEachCell(function(x, elem) {\n                        var text, wrapper;\n                        text = elem.text();\n                        wrapper = $(\"<div>\").css({\n                            \"position\": \"relative\"\n                        });\n                        wrapper.append($(\"<div>\").css({\n                            \"position\": \"absolute\",\n                            \"bottom\": -2,\n                            \"left\": 0,\n                            \"right\": 0,\n                            \"height\": scaler(x) + \"%\",\n                            \"background-color\": \"gray\"\n                        }));\n                        wrapper.append($(\"<div>\").text(text).css({\n                            \"position\": \"relative\",\n                            \"padding-left\": \"5px\",\n                            \"padding-right\": \"5px\"\n                        }));\n                        return elem.css({\n                            \"padding\": 0,\n                            \"padding-top\": \"5px\",\n                            \"text-align\": \"center\"\n                        }).html(wrapper);\n                    });\n                };\n            })(this);\n            for (i = k = 0, ref = numRows; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {\n                barcharter(\".pvtVal.row\" + i);\n            }\n            barcharter(\".pvtTotal.colTotal\");\n            return this;\n        };\n        return datatables_renderers = {\n            \"Table\": function(pvtData, opts) {\n                return $(datatable(pvtData, opts)).finalize(opts);\n            },\n            \"Table Barchart\": function(pvtData, opts) {\n                return $(datatable(pvtData, opts)).barchart().finalize(opts);\n            },\n            \"Heatmap\": function(pvtData, opts) {\n                return $(datatable(pvtData, opts)).heatmap(\"heatmap\", opts).finalize(opts);\n            },\n            \"Row Heatmap\": function(pvtData, opts) {\n                return $(datatable(pvtData, opts)).heatmap(\"rowheatmap\", opts).finalize(opts);\n            },\n            \"Col Heatmap\": function(pvtData, opts) {\n                return $(datatable(pvtData, opts)).heatmap(\"colheatmap\", opts).finalize(opts);\n            }\n        };\n    });\n\n}).call(this);\n\n//# sourceMappingURL=datatables_renderers.js.map\n"],"file":"datatables_renderers.js"}