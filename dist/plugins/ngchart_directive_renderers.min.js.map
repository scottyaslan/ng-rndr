{"version":3,"sources":["ngchart_directive_renderers.min.js"],"names":["callWithJQuery","pivotModule","exports","module","require","define","amd","jQuery","$","makeGoogleChart","ngchart_directive_renderers","chartType","extraOptions","pivotData","opts","agg","base","base1","colKey","colKeys","dataArray","dataTable","defaults","fullAggName","groupByTitle","h","hAxisTitle","headers","i","j","len","len1","numCharsInHAxis","options","ref","result","row","rowKey","rowKeys","title","tree2","vAxisTitle","val","x","y","localeStrings","vs","by","gchart","extend","width","window","innerWidth","height","innerHeight","getRowKeys","length","push","getColKeys","aggregatorName","valAttrs","join","results","unshift","tree","parseFloat","format","value","google","visualization","DataTable","addColumn","colAttrs","rowAttrs","type","role","addRows","getAggregator","isNumeric","toPrecision","toFixed","arrayToDataTable","hAxis","slantedText","vAxis","tooltip","textStyle","fontName","fontSize","minValue","legend","position","chartArea","html","isDirective","chart","data","Line Chart","Bar Chart","Stacked Bar Chart","isStacked","Area Chart","Scatter Chart","call","this"],"mappings":"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","file":"ngchart_directive_renderers.min.js","sourcesContent":["(function() {\n  var callWithJQuery;\n\n  callWithJQuery = function(pivotModule) {\n    if (typeof exports === \"object\" && typeof module === \"object\") {\n      return pivotModule(require(\"jquery\"));\n    } else if (typeof define === \"function\" && define.amd) {\n      return define([\"jquery\"], pivotModule);\n    } else {\n      return pivotModule(jQuery);\n    }\n  };\n\n  callWithJQuery(function($) {\n    var makeGoogleChart, ngchart_directive_renderers;\n    makeGoogleChart = function(chartType, extraOptions) {\n      return function(pivotData, opts) {\n        var agg, base, base1, colKey, colKeys, dataArray, dataTable, defaults, fullAggName, groupByTitle, h, hAxisTitle, headers, i, j, len, len1, numCharsInHAxis, options, ref, result, row, rowKey, rowKeys, title, tree2, vAxisTitle, val, x, y;\n        defaults = {\n          localeStrings: {\n            vs: \"vs\",\n            by: \"by\"\n          },\n          gchart: {}\n        };\n        opts = $.extend(true, defaults, opts);\n        if ((base = opts.gchart).width == null) {\n          base.width = window.innerWidth / 1.4;\n        }\n        if ((base1 = opts.gchart).height == null) {\n          base1.height = window.innerHeight / 1.4;\n        }\n        rowKeys = pivotData.getRowKeys();\n        if (rowKeys.length === 0) {\n          rowKeys.push([]);\n        }\n        colKeys = pivotData.getColKeys();\n        if (colKeys.length === 0) {\n          colKeys.push([]);\n        }\n        fullAggName = pivotData.aggregatorName;\n        if (pivotData.valAttrs.length) {\n          fullAggName += \"(\" + (pivotData.valAttrs.join(\", \")) + \")\";\n        }\n        headers = (function() {\n          var i, len, results;\n          results = [];\n          for (i = 0, len = rowKeys.length; i < len; i++) {\n            h = rowKeys[i];\n            results.push(h.join(\"-\"));\n          }\n          return results;\n        })();\n        headers.unshift(\"\");\n        numCharsInHAxis = 0;\n        if (chartType === \"ScatterChart\") {\n          dataArray = [];\n          ref = pivotData.tree;\n          for (y in ref) {\n            tree2 = ref[y];\n            for (x in tree2) {\n              agg = tree2[x];\n              dataArray.push([parseFloat(x), parseFloat(y), fullAggName + \": \\n\" + agg.format(agg.value())]);\n            }\n          }\n          dataTable = new google.visualization.DataTable();\n          dataTable.addColumn('number', pivotData.colAttrs.join(\"-\"));\n          dataTable.addColumn('number', pivotData.rowAttrs.join(\"-\"));\n          dataTable.addColumn({\n            type: \"string\",\n            role: \"tooltip\"\n          });\n          dataTable.addRows(dataArray);\n          hAxisTitle = pivotData.colAttrs.join(\"-\");\n          vAxisTitle = pivotData.rowAttrs.join(\"-\");\n          title = \"\";\n        } else {\n          dataArray = [headers];\n          for (i = 0, len = colKeys.length; i < len; i++) {\n            colKey = colKeys[i];\n            row = [colKey.join(\"-\")];\n            numCharsInHAxis += row[0].length;\n            for (j = 0, len1 = rowKeys.length; j < len1; j++) {\n              rowKey = rowKeys[j];\n              agg = pivotData.getAggregator(rowKey, colKey);\n              if (agg.value() != null) {\n                val = agg.value();\n                if ($.isNumeric(val)) {\n                  if (val < 1) {\n                    row.push(parseFloat(val.toPrecision(3)));\n                  } else {\n                    row.push(parseFloat(val.toFixed(3)));\n                  }\n                } else {\n                  row.push(val);\n                }\n              } else {\n                row.push(null);\n              }\n            }\n            dataArray.push(row);\n          }\n          dataTable = google.visualization.arrayToDataTable(dataArray);\n          title = vAxisTitle = fullAggName;\n          hAxisTitle = pivotData.colAttrs.join(\"-\");\n          if (hAxisTitle !== \"\") {\n            title += \" \" + opts.localeStrings.vs + \" \" + hAxisTitle;\n          }\n          groupByTitle = pivotData.rowAttrs.join(\"-\");\n          if (groupByTitle !== \"\") {\n            title += \" \" + opts.localeStrings.by + \" \" + groupByTitle;\n          }\n        }\n        options = {\n          title: title,\n          hAxis: {\n            title: hAxisTitle,\n            slantedText: numCharsInHAxis > 50\n          },\n          vAxis: {\n            title: vAxisTitle\n          },\n          tooltip: {\n            textStyle: {\n              fontName: 'Arial',\n              fontSize: 12\n            }\n          }\n        };\n        if (chartType === \"ColumnChart\") {\n          options.vAxis.minValue = 0;\n        }\n        if (chartType === \"ScatterChart\") {\n          options.legend = {\n            position: \"none\"\n          };\n          options.chartArea = {\n            'width': '80%',\n            'height': '80%'\n          };\n        } else if (dataArray[0].length === 2 && dataArray[0][1] === \"\") {\n          options.legend = {\n            position: \"none\"\n          };\n        }\n        $.extend(options, opts.gchart, extraOptions);\n        result = {\n          html: '<div google-chart chart=\\'chartData\\'>',\n          isDirective: true,\n          chart: {\n            data: dataArray,\n            options: options,\n            type: chartType\n          }\n        };\n        return result;\n      };\n    };\n    return ngchart_directive_renderers = {\n      \"Line Chart\": makeGoogleChart(\"LineChart\"),\n      \"Bar Chart\": makeGoogleChart(\"ColumnChart\"),\n      \"Stacked Bar Chart\": makeGoogleChart(\"ColumnChart\", {\n        isStacked: true\n      }),\n      \"Area Chart\": makeGoogleChart(\"AreaChart\", {\n        isStacked: true\n      }),\n      \"Scatter Chart\": makeGoogleChart(\"ScatterChart\")\n    };\n  });\n\n}).call(this);\n\n//# sourceMappingURL=ngchart_directive_renderers.js.map\n\n//# sourceMappingURL=ngchart_directive_renderers.js.map\n"],"sourceRoot":"/source/"}