{"version":3,"names":[],"mappings":"","sources":["c3_renderers.js"],"sourcesContent":["(function() {\n  var callWithJQuery;\n\n  callWithJQuery = function(pivotModule) {\n    if (typeof exports === \"object\" && typeof module === \"object\") {\n      return pivotModule(require(\"jquery\"), require(\"c3\"));\n    } else if (typeof define === \"function\" && define.amd) {\n      return define([\"jquery\", \"c3\"], pivotModule);\n    } else {\n      return pivotModule(jQuery, c3);\n    }\n  };\n\n  callWithJQuery(function($, c3) {\n    var c3_renderers, makeC3Chart;\n    makeC3Chart = function(chartOpts) {\n      if (chartOpts == null) {\n        chartOpts = {};\n      }\n      return function(pivotData, opts) {\n        var agg, base, base1, base2, colKey, colKeys, columns, dataArray, datum, defaults, fullAggName, groupByTitle, h, hAxisTitle, headers, i, j, k, len, len1, len2, numCharsInHAxis, params, ref, renderArea, result, returnObject, rotationAngle, row, rowHeader, rowKey, rowKeys, title, titleText, tree2, vAxisTitle, val, x, y;\n        defaults = {\n          localeStrings: {\n            vs: \"vs\",\n            by: \"by\"\n          },\n          c3: {}\n        };\n        opts = $.extend(true, defaults, opts);\n        if ((base = opts.c3).size == null) {\n          base.size = {};\n        }\n        if ((base1 = opts.c3.size).width == null) {\n          base1.width = window.innerWidth / 1.4;\n        }\n        if ((base2 = opts.c3.size).height == null) {\n          base2.height = window.innerHeight / 1.4 - 50;\n        }\n        if (chartOpts.type == null) {\n          chartOpts.type = \"line\";\n        }\n        rowKeys = pivotData.getRowKeys();\n        if (rowKeys.length === 0) {\n          rowKeys.push([]);\n        }\n        colKeys = pivotData.getColKeys();\n        if (colKeys.length === 0) {\n          colKeys.push([]);\n        }\n        headers = (function() {\n          var i, len, results;\n          results = [];\n          for (i = 0, len = colKeys.length; i < len; i++) {\n            h = colKeys[i];\n            results.push(h.join(\"-\"));\n          }\n          return results;\n        })();\n        rotationAngle = 0;\n        fullAggName = pivotData.aggregatorName;\n        if (pivotData.valAttrs.length) {\n          fullAggName += \"(\" + (pivotData.valAttrs.join(\", \")) + \")\";\n        }\n        if (chartOpts.type === \"scatter\") {\n          dataArray = [];\n          hAxisTitle = pivotData.colAttrs.join(\"-\");\n          vAxisTitle = pivotData.rowAttrs.join(\"-\");\n          ref = pivotData.tree;\n          for (y in ref) {\n            tree2 = ref[y];\n            for (x in tree2) {\n              agg = tree2[x];\n              datum = {};\n              datum[hAxisTitle] = parseFloat(x);\n              datum[vAxisTitle] = parseFloat(y);\n              datum[\"tooltip\"] = agg.format(agg.value());\n              dataArray.push(datum);\n            }\n          }\n        } else {\n          numCharsInHAxis = 0;\n          for (i = 0, len = headers.length; i < len; i++) {\n            x = headers[i];\n            numCharsInHAxis += x.length;\n          }\n          if (numCharsInHAxis > 50) {\n            rotationAngle = 45;\n          }\n          columns = [];\n          for (j = 0, len1 = rowKeys.length; j < len1; j++) {\n            rowKey = rowKeys[j];\n            rowHeader = rowKey.join(\"-\");\n            row = [rowHeader === \"\" ? pivotData.aggregatorName : rowHeader];\n            for (k = 0, len2 = colKeys.length; k < len2; k++) {\n              colKey = colKeys[k];\n              val = parseFloat(pivotData.getAggregator(rowKey, colKey).value());\n              if (isFinite(val)) {\n                if (val < 1) {\n                  row.push(val.toPrecision(3));\n                } else {\n                  row.push(val.toFixed(3));\n                }\n              } else {\n                row.push(null);\n              }\n            }\n            columns.push(row);\n          }\n          vAxisTitle = pivotData.aggregatorName + (pivotData.valAttrs.length ? \"(\" + (pivotData.valAttrs.join(\", \")) + \")\" : \"\");\n          hAxisTitle = pivotData.colAttrs.join(\"-\");\n        }\n        titleText = fullAggName;\n        if (hAxisTitle !== \"\") {\n          titleText += \" \" + opts.localeStrings.vs + \" \" + hAxisTitle;\n        }\n        groupByTitle = pivotData.rowAttrs.join(\"-\");\n        if (groupByTitle !== \"\") {\n          titleText += \" \" + opts.localeStrings.by + \" \" + groupByTitle;\n        }\n        title = $(\"<p>\", {\n          style: \"text-align: center; font-weight: bold\"\n        });\n        title.text(titleText);\n        params = {\n          axis: {\n            y: {\n              label: vAxisTitle\n            },\n            x: {\n              label: hAxisTitle,\n              tick: {\n                rotate: rotationAngle,\n                multiline: false\n              }\n            }\n          },\n          data: {\n            type: chartOpts.type\n          },\n          tooltip: {\n            grouped: false\n          },\n          color: {\n            pattern: [\"#3366cc\", \"#dc3912\", \"#ff9900\", \"#109618\", \"#990099\", \"#0099c6\", \"#dd4477\", \"#66aa00\", \"#b82e2e\", \"#316395\", \"#994499\", \"#22aa99\", \"#aaaa11\", \"#6633cc\", \"#e67300\", \"#8b0707\", \"#651067\", \"#329262\", \"#5574a6\", \"#3b3eac\"]\n          }\n        };\n        $.extend(params, opts.c3);\n        if (chartOpts.type === \"scatter\") {\n          params.data.x = hAxisTitle;\n          params.axis.x.tick = {\n            fit: false\n          };\n          params.data.json = dataArray;\n          params.data.keys = {\n            value: [hAxisTitle, vAxisTitle]\n          };\n          params.legend = {\n            show: false\n          };\n          params.tooltip.format = {\n            title: function() {\n              return fullAggName;\n            },\n            name: function() {\n              return \"\";\n            },\n            value: function(a, b, c, d) {\n              return dataArray[d].tooltip;\n            }\n          };\n        } else {\n          params.axis.x.type = 'category';\n          params.axis.x.categories = headers;\n          params.data.columns = columns;\n        }\n        if (chartOpts.stacked != null) {\n          params.data.groups = [\n            (function() {\n              var l, len3, results;\n              results = [];\n              for (l = 0, len3 = rowKeys.length; l < len3; l++) {\n                x = rowKeys[l];\n                results.push(x.join(\"-\"));\n              }\n              return results;\n            })()\n          ];\n        }\n        renderArea = $(\"<div>\", {\n          style: \"display:none;\"\n        }).appendTo($(\"body\"));\n        result = $(\"<div>\").appendTo(renderArea);\n        params.bindto = result[0];\n        c3.generate(params);\n        result.detach();\n        renderArea.remove();\n        $(\"<div>\").append(title, result);\n        return returnObject = {\n          html: result\n        };\n      };\n    };\n    return c3_renderers = {\n      \"C3 - Line Chart\": makeC3Chart(),\n      \"C3 - Bar Chart\": makeC3Chart({\n        type: \"bar\"\n      }),\n      \"C3 - Stacked Bar Chart\": makeC3Chart({\n        type: \"bar\",\n        stacked: true\n      }),\n      \"C3 - Area Chart\": makeC3Chart({\n        type: \"area\",\n        stacked: true\n      }),\n      \"C3 - Scatter Chart\": makeC3Chart({\n        type: \"scatter\"\n      })\n    };\n  });\n\n}).call(this);\n\n//# sourceMappingURL=c3_renderers.js.map\n"],"file":"c3_renderers.js","sourceRoot":"/source/"}