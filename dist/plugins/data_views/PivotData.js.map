{"version":3,"names":[],"mappings":"","sources":["PivotData.js"],"sourcesContent":["(function() {\r\n    var callWithJQuery;\r\n\r\n    callWithJQuery = function(factory) {\r\n        if (typeof exports === \"object\" && typeof module === \"object\") {\r\n            return factory(require(\"jquery\"));\r\n        } else if (typeof define === \"function\" && define.amd) {\r\n            return define([\"jquery\"], factory);\r\n        } else {\r\n            if (window.ngRNDR === undefined) {\r\n                window.ngRNDR = {};\r\n                if (window.ngRNDR.plugins === undefined) {\r\n                    window.ngRNDR.plugins = {};\r\n                    if (window.ngRNDR.plugins.dataViews === undefined) {\r\n                        window.ngRNDR.plugins.dataViews = {};\r\n                    }\r\n                }\r\n            }\r\n            window.ngRNDR.plugins.dataViews = $.extend({}, window.ngRNDR.plugins.dataViews, factory(jQuery, d3));\r\n            return window.ngRNDR.plugins.dataViews;\r\n        }\r\n    };\r\n\r\n    callWithJQuery(function($) {\r\n        function PivotData(data, opts) {\r\n            this.dataUtils = opts.dataUtils;\r\n            this.filter = function(record) {\r\n                var excludedItems, ref7;\r\n                for (var k in this.meta.attributeFilterExclusions) {\r\n                    excludedItems = this.meta.attributeFilterExclusions[k];\r\n                    if (ref7 = \"\" + record[k], this.dataUtils.indexOf.call(excludedItems, ref7) >= 0) {\r\n                        return false;\r\n                    }\r\n                }\r\n                return true;\r\n            };\r\n            this.sorters = function() {};\r\n            this.axisValues = {};\r\n\r\n            this.meta = opts.meta;\r\n            this.meta.colAttrs = opts.meta.cols;\r\n            this.meta.rowAttrs = opts.meta.rows;\r\n            this.meta.valAttrs = opts.meta.vals;\r\n            this.meta.sorters = opts.meta.sorters;\r\n            this.meta.tree = {};\r\n            this.meta.rowKeys = [];\r\n            this.meta.colKeys = [];\r\n            this.meta.rowTotals = {};\r\n            this.meta.colTotals = {};\r\n            this.meta.sorted = false;\r\n            this.meta.aggregatorName = opts.aggregator.name;\r\n            this.meta.aggregator = opts.aggregator.aggregate;\r\n            this.meta.allTotal = this.meta.aggregator(this, [], []);\r\n\r\n            var self = this;\r\n\r\n            //Prep the data\r\n            data = self.dataUtils.convertToArray(data);\r\n\r\n            self.meta.availableAttributes = self.meta.rowAttrs.concat(self.meta.colAttrs);\r\n            self.meta.tblCols = (function() {\r\n                var ref, results;\r\n                ref = data[0];\r\n                results = [];\r\n                for (var k in ref) {\r\n                    if (!self.dataUtils.hasProp.call(ref, k)) continue;\r\n                    results.push(k);\r\n                }\r\n                return results;\r\n            })();\r\n            for (var l = 0, len1 = self.meta.tblCols.length; l < len1; l++) {\r\n                var x = self.meta.tblCols[l];\r\n                self.axisValues[x] = {};\r\n            }\r\n            self.meta.shownAttributes = (function() {\r\n                var len2, n, results;\r\n                results = [];\r\n                for (var n = 0, len2 = self.meta.tblCols.length; n < len2; n++) {\r\n                    var c = self.meta.tblCols[n];\r\n                    if (self.dataUtils.indexOf.call(self.meta.hiddenAttributes, c) < 0) {\r\n                        results.push(c);\r\n                    }\r\n                }\r\n                return results;\r\n            })();\r\n            if (self.meta.attributesAvailableForRowsAndCols.length + self.meta.rows.length + self.meta.cols.length !== self.meta.shownAttributes.length) {\r\n                self.meta.attributesAvailableForRowsAndCols = self.meta.shownAttributes;\r\n            }\r\n\r\n            self.dataUtils.forEachRecord(data, self.meta.derivedAttributes, function(record) {\r\n                var base, results, v;\r\n                results = [];\r\n                for (var k in record) {\r\n                    if (!self.dataUtils.hasProp.call(record, k)) continue;\r\n                    v = record[k];\r\n                    if (v == null) {\r\n                        v = \"null\";\r\n                    }\r\n                    if ((base = self.axisValues[k])[v] == null) {\r\n                        base[v] = 0;\r\n                    }\r\n                    results.push(self.axisValues[k][v]++);\r\n                }\r\n                return results;\r\n            });\r\n            self.dataUtils.forEachRecord(data, self.meta.derivedAttributes, (function(_this) {\r\n                return function(record) {\r\n                    if (_this.filter(record)) {\r\n                        return _this.processRecord(record);\r\n                    }\r\n                };\r\n            })(self));\r\n        }\r\n        PivotData.prototype = {\r\n            constructor: PivotData,\r\n            arrSort: function(attrs) {\r\n                var a, sortersArr;\r\n                sortersArr = (function() {\r\n                    var l, len1, results;\r\n                    results = [];\r\n                    for (l = 0, len1 = attrs.length; l < len1; l++) {\r\n                        a = attrs[l];\r\n                        results.push(this.dataUtils.getSort(this.sorters, a));\r\n                    }\r\n                    return results;\r\n                }).call(this);\r\n                return function(a, b) {\r\n                    var comparison, i, sorter;\r\n                    for (i in sortersArr) {\r\n                        sorter = sortersArr[i];\r\n                        comparison = sorter(a[i], b[i]);\r\n                        if (comparison !== 0) {\r\n                            return comparison;\r\n                        }\r\n                    }\r\n                    return 0;\r\n                };\r\n            },\r\n            sortKeys: function() {\r\n                if (!this.meta.sorted) {\r\n                    this.meta.sorted = true;\r\n                    this.meta.rowKeys.sort(this.arrSort(this.meta.rowAttrs));\r\n                    this.meta.colKeys.sort(this.arrSort(this.meta.colAttrs));\r\n                }\r\n            },\r\n            getColKeys: function() {\r\n                this.sortKeys();\r\n                return this.meta.colKeys;\r\n            },\r\n            getRowKeys: function() {\r\n                this.sortKeys();\r\n                return this.meta.rowKeys;\r\n            },\r\n            processRecord: function(record) {\r\n                var colKey, flatColKey, flatRowKey, l, len1, len2, n, ref, ref1, ref2, ref3, rowKey, x;\r\n                colKey = [];\r\n                rowKey = [];\r\n                ref = this.meta.colAttrs;\r\n                for (l = 0, len1 = ref.length; l < len1; l++) {\r\n                    x = ref[l];\r\n                    colKey.push((ref1 = record[x]) != null ? ref1 : \"null\");\r\n                }\r\n                ref2 = this.meta.rowAttrs;\r\n                for (n = 0, len2 = ref2.length; n < len2; n++) {\r\n                    x = ref2[n];\r\n                    rowKey.push((ref3 = record[x]) != null ? ref3 : \"null\");\r\n                }\r\n                flatRowKey = rowKey.join(String.fromCharCode(0));\r\n                flatColKey = colKey.join(String.fromCharCode(0));\r\n                this.meta.allTotal.push(record);\r\n                if (rowKey.length !== 0) {\r\n                    if (!this.meta.rowTotals[flatRowKey]) {\r\n                        this.meta.rowKeys.push(rowKey);\r\n                        this.meta.rowTotals[flatRowKey] = this.meta.aggregator(this, rowKey, []);\r\n                    }\r\n                    this.meta.rowTotals[flatRowKey].push(record);\r\n                }\r\n                if (colKey.length !== 0) {\r\n                    if (!this.meta.colTotals[flatColKey]) {\r\n                        this.meta.colKeys.push(colKey);\r\n                        this.meta.colTotals[flatColKey] = this.meta.aggregator(this, [], colKey);\r\n                    }\r\n                    this.meta.colTotals[flatColKey].push(record);\r\n                }\r\n                if (colKey.length !== 0 && rowKey.length !== 0) {\r\n                    if (!this.meta.tree[flatRowKey]) {\r\n                        this.meta.tree[flatRowKey] = {};\r\n                    }\r\n                    if (!this.meta.tree[flatRowKey][flatColKey]) {\r\n                        this.meta.tree[flatRowKey][flatColKey] = this.meta.aggregator(this, rowKey, colKey);\r\n                    }\r\n                    return this.meta.tree[flatRowKey][flatColKey].push(record);\r\n                }\r\n            },\r\n            getAggregator: function(rowKey, colKey) {\r\n                var agg, flatColKey, flatRowKey;\r\n                flatRowKey = rowKey.join(String.fromCharCode(0));\r\n                flatColKey = colKey.join(String.fromCharCode(0));\r\n                if (rowKey.length === 0 && colKey.length === 0) {\r\n                    agg = this.meta.allTotal;\r\n                } else if (rowKey.length === 0) {\r\n                    agg = this.meta.colTotals[flatColKey];\r\n                } else if (colKey.length === 0) {\r\n                    agg = this.meta.rowTotals[flatRowKey];\r\n                } else {\r\n                    agg = this.meta.tree[flatRowKey][flatColKey];\r\n                }\r\n                return agg != null ? agg : {\r\n                    value: (function() {\r\n                        return null;\r\n                    }),\r\n                    format: function() {\r\n                        return \"\";\r\n                    }\r\n                };\r\n            },\r\n            isExcluded: function(property, key) {\r\n                var self = this;\r\n                if (self.meta.attributeFilterExclusions[property] !== undefined) {\r\n                    if (self.meta.attributeFilterExclusions[property].indexOf(key) >= 0) {\r\n                        return false;\r\n                    } else {\r\n                        return true;\r\n                    }\r\n                }\r\n                return true;\r\n            },\r\n            addExclusionFilter: function(attributeFilterName, filterByAttributeValue) {\r\n                var self = this;\r\n                if (self.meta.attributeFilterExclusions[attributeFilterName] !== undefined) {\r\n                    var index = self.meta.attributeFilterExclusions[attributeFilterName].indexOf(filterByAttributeValue);\r\n                    if (index >= 0) {\r\n                        self.meta.attributeFilterExclusions[attributeFilterName].splice(index, 1);\r\n                    } else {\r\n                        self.meta.attributeFilterExclusions[attributeFilterName].push(filterByAttributeValue);\r\n                    }\r\n                } else {\r\n                    self.meta.attributeFilterExclusions[attributeFilterName] = [];\r\n                    self.meta.attributeFilterExclusions[attributeFilterName].push(filterByAttributeValue);\r\n                }\r\n                self.meta.attributeFilterInclusions[attributeFilterName] = [];\r\n                angular.forEach(self.axisValues[attributeFilterName], function(value, key) {\r\n                    if (self.meta.attributeFilterExclusions[attributeFilterName].indexOf(key) < 0) {\r\n                        self.meta.attributeFilterInclusions[attributeFilterName].push(key);\r\n                    }\r\n                });\r\n            },\r\n            addInclusionFilter: function(attributeFilterName, filterByAttributeValue) {\r\n                var self = this;\r\n                self.meta.attributeFilterInclusions[attributeFilterName] = [];\r\n                self.meta.attributeFilterExclusions[attributeFilterName] = [];\r\n                self.addExclusionFilter(attributeFilterName, filterByAttributeValue);\r\n                var oldAttributeFilterInclusions = self.meta.attributeFilterInclusions[attributeFilterName];\r\n                self.meta.attributeFilterInclusions[attributeFilterName] = self.meta.attributeFilterExclusions[attributeFilterName];\r\n                self.meta.attributeFilterExclusions[attributeFilterName] = oldAttributeFilterInclusions;\r\n            }\r\n        };\r\n        return PivotData;\r\n    });\r\n\r\n}).call(this);\r\n\r\n//# sourceMappingURL=PivotData.js.map\r\n"],"file":"PivotData.js","sourceRoot":"/source/"}