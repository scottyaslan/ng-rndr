{"version":3,"sources":["/source/gchart_renderers.coffee","gchart_renderers.min.js"],"names":["callWithJQuery","pivotModule","exports","module","require","define","amd","jQuery","$","gchart_renderers","makeGoogleChart","chartType","extraOptions","pivotData","opts","agg","base","base1","colKey","colKeys","dataArray","dataTable","defaults","fullAggName","groupByTitle","h","hAxisTitle","headers","i","j","len","len1","numCharsInHAxis","options","ref","result","returnObject","row","rowKey","rowKeys","title","tree2","vAxisTitle","val","wrapper","x","y","localeStrings","vs","by","gchart","extend","width","window","innerWidth","height","innerHeight","getRowKeys","length","push","getColKeys","aggregatorName","valAttrs","join","results","unshift","tree","parseFloat","format","value","google","visualization","DataTable","addColumn","colAttrs","rowAttrs","type","role","addRows","getAggregator","isNumeric","toPrecision","toFixed","arrayToDataTable","hAxis","slantedText","vAxis","tooltip","textStyle","fontName","fontSize","chartArea","minValue","legend","position","css","ChartWrapper","draw","bind","editor","ChartEditor","events","addListener","getChartWrapper","openDialog","html","Line Chart","Bar Chart","Stacked Bar Chart","isStacked","Area Chart","Scatter Chart","call","this"],"mappings":"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","file":"gchart_renderers.min.js","sourcesContent":["###\n    Data Analytics Toolkit: Explore any data avaialable through a REST service \n    Copyright (C) 2016  Scott Aslan\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as\n    published by the Free Software Foundation, either version 3 of the\n    License, or (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/agpl.html>.\n###\ncallWithJQuery = (pivotModule) ->\n    if typeof exports is \"object\" and typeof module is \"object\" # CommonJS\n        pivotModule require(\"jquery\")\n    else if typeof define is \"function\" and define.amd # AMD\n        define [\"jquery\"], pivotModule\n    # Plain browser env\n    else\n        pivotModule jQuery\n        \ncallWithJQuery ($) ->\n\n    makeGoogleChart = (chartType, extraOptions) -> (pivotData, opts) ->\n        defaults =\n            localeStrings:\n                vs: \"vs\"\n                by: \"by\"\n            gchart: {}\n\n        opts = $.extend true, defaults, opts\n        opts.gchart.width ?= window.innerWidth / 1.4\n        opts.gchart.height ?= window.innerHeight / 1.4\n\n        rowKeys = pivotData.getRowKeys()\n        rowKeys.push [] if rowKeys.length == 0\n        colKeys = pivotData.getColKeys()\n        colKeys.push [] if colKeys.length == 0\n        fullAggName = pivotData.aggregatorName \n        if pivotData.valAttrs.length\n            fullAggName += \"(#{pivotData.valAttrs.join(\", \")})\"\n        headers = (h.join(\"-\") for h in rowKeys)\n        headers.unshift \"\"\n\n        numCharsInHAxis = 0\n        if chartType == \"ScatterChart\"\n            dataArray = []\n            for y, tree2 of pivotData.tree\n                for x, agg of tree2\n                     dataArray.push [\n                        parseFloat(x),\n                        parseFloat(y),\n                        fullAggName+\": \\n\"+agg.format(agg.value())\n                        ]\n            dataTable = new google.visualization.DataTable()\n            dataTable.addColumn 'number', pivotData.colAttrs.join(\"-\")\n            dataTable.addColumn 'number', pivotData.rowAttrs.join(\"-\") \n            dataTable.addColumn type: \"string\", role: \"tooltip\"\n            dataTable.addRows dataArray\n            hAxisTitle = pivotData.colAttrs.join(\"-\")\n            vAxisTitle = pivotData.rowAttrs.join(\"-\")\n            title = \"\"\n        else\n            dataArray = [headers]\n            for colKey in colKeys\n                row = [colKey.join(\"-\")]\n                numCharsInHAxis += row[0].length\n                for rowKey in rowKeys\n                    agg = pivotData.getAggregator(rowKey, colKey)\n                    if agg.value()?\n                        val = agg.value()\n                        if $.isNumeric val\n                            if val < 1\n                                row.push parseFloat(val.toPrecision(3))\n                            else\n                                row.push parseFloat(val.toFixed(3))\n                        else\n                            row.push val\n                    else row.push null\n                dataArray.push row\n\n            dataTable = google.visualization.arrayToDataTable(dataArray)\n\n            title = vAxisTitle = fullAggName\n            hAxisTitle = pivotData.colAttrs.join(\"-\")\n            title += \" #{opts.localeStrings.vs} #{hAxisTitle}\" if hAxisTitle != \"\"\n            groupByTitle = pivotData.rowAttrs.join(\"-\")\n            title += \" #{opts.localeStrings.by} #{groupByTitle}\" if groupByTitle != \"\"\n\n        options = \n            title: title\n            hAxis: {title: hAxisTitle, slantedText: numCharsInHAxis > 50}\n            vAxis: {title: vAxisTitle}\n            tooltip: { textStyle: { fontName: 'Arial', fontSize: 12 } }\n            chartArea: {'width': '80%', 'height': '80%'}\n            \n        if chartType == \"ColumnChart\"\n            options.vAxis.minValue = 0\n\n        if chartType == \"ScatterChart\"\n            options.legend = position: \"none\"\n\n        else if dataArray[0].length == 2 and dataArray[0][1] ==  \"\"\n            options.legend = position: \"none\"\n        \n        $.extend options, opts.gchart, extraOptions\n\n        result = $(\"<div>\").css(width: opts.gchart.width, height: opts.gchart.height)\n        wrapper = new google.visualization.ChartWrapper {dataTable, chartType, options}\n        wrapper.draw(result[0])    \n        result.bind \"dblclick\", -> \n            editor = new google.visualization.ChartEditor()\n            google.visualization.events.addListener editor, 'ok', -> \n                editor.getChartWrapper().draw(result[0])\n            editor.openDialog(wrapper)\n        return returnObject = \n                html: result\n\n    gchart_renderers = \n        \"Line Chart\": makeGoogleChart(\"LineChart\")\n        \"Bar Chart\": makeGoogleChart(\"ColumnChart\")\n        \"Stacked Bar Chart\": makeGoogleChart(\"ColumnChart\", isStacked: true)\n        \"Area Chart\": makeGoogleChart(\"AreaChart\", isStacked: true)\n        \"Scatter Chart\": makeGoogleChart(\"ScatterChart\")\n","\n/*\n    Data Analytics Toolkit: Explore any data avaialable through a REST service \n    Copyright (C) 2016  Scott Aslan\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as\n    published by the Free Software Foundation, either version 3 of the\n    License, or (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/agpl.html>.\n */\n\n(function() {\n  var callWithJQuery;\n\n  callWithJQuery = function(pivotModule) {\n    if (typeof exports === \"object\" && typeof module === \"object\") {\n      return pivotModule(require(\"jquery\"));\n    } else if (typeof define === \"function\" && define.amd) {\n      return define([\"jquery\"], pivotModule);\n    } else {\n      return pivotModule(jQuery);\n    }\n  };\n\n  callWithJQuery(function($) {\n    var gchart_renderers, makeGoogleChart;\n    makeGoogleChart = function(chartType, extraOptions) {\n      return function(pivotData, opts) {\n        var agg, base, base1, colKey, colKeys, dataArray, dataTable, defaults, fullAggName, groupByTitle, h, hAxisTitle, headers, i, j, len, len1, numCharsInHAxis, options, ref, result, returnObject, row, rowKey, rowKeys, title, tree2, vAxisTitle, val, wrapper, x, y;\n        defaults = {\n          localeStrings: {\n            vs: \"vs\",\n            by: \"by\"\n          },\n          gchart: {}\n        };\n        opts = $.extend(true, defaults, opts);\n        if ((base = opts.gchart).width == null) {\n          base.width = window.innerWidth / 1.4;\n        }\n        if ((base1 = opts.gchart).height == null) {\n          base1.height = window.innerHeight / 1.4;\n        }\n        rowKeys = pivotData.getRowKeys();\n        if (rowKeys.length === 0) {\n          rowKeys.push([]);\n        }\n        colKeys = pivotData.getColKeys();\n        if (colKeys.length === 0) {\n          colKeys.push([]);\n        }\n        fullAggName = pivotData.aggregatorName;\n        if (pivotData.valAttrs.length) {\n          fullAggName += \"(\" + (pivotData.valAttrs.join(\", \")) + \")\";\n        }\n        headers = (function() {\n          var i, len, results;\n          results = [];\n          for (i = 0, len = rowKeys.length; i < len; i++) {\n            h = rowKeys[i];\n            results.push(h.join(\"-\"));\n          }\n          return results;\n        })();\n        headers.unshift(\"\");\n        numCharsInHAxis = 0;\n        if (chartType === \"ScatterChart\") {\n          dataArray = [];\n          ref = pivotData.tree;\n          for (y in ref) {\n            tree2 = ref[y];\n            for (x in tree2) {\n              agg = tree2[x];\n              dataArray.push([parseFloat(x), parseFloat(y), fullAggName + \": \\n\" + agg.format(agg.value())]);\n            }\n          }\n          dataTable = new google.visualization.DataTable();\n          dataTable.addColumn('number', pivotData.colAttrs.join(\"-\"));\n          dataTable.addColumn('number', pivotData.rowAttrs.join(\"-\"));\n          dataTable.addColumn({\n            type: \"string\",\n            role: \"tooltip\"\n          });\n          dataTable.addRows(dataArray);\n          hAxisTitle = pivotData.colAttrs.join(\"-\");\n          vAxisTitle = pivotData.rowAttrs.join(\"-\");\n          title = \"\";\n        } else {\n          dataArray = [headers];\n          for (i = 0, len = colKeys.length; i < len; i++) {\n            colKey = colKeys[i];\n            row = [colKey.join(\"-\")];\n            numCharsInHAxis += row[0].length;\n            for (j = 0, len1 = rowKeys.length; j < len1; j++) {\n              rowKey = rowKeys[j];\n              agg = pivotData.getAggregator(rowKey, colKey);\n              if (agg.value() != null) {\n                val = agg.value();\n                if ($.isNumeric(val)) {\n                  if (val < 1) {\n                    row.push(parseFloat(val.toPrecision(3)));\n                  } else {\n                    row.push(parseFloat(val.toFixed(3)));\n                  }\n                } else {\n                  row.push(val);\n                }\n              } else {\n                row.push(null);\n              }\n            }\n            dataArray.push(row);\n          }\n          dataTable = google.visualization.arrayToDataTable(dataArray);\n          title = vAxisTitle = fullAggName;\n          hAxisTitle = pivotData.colAttrs.join(\"-\");\n          if (hAxisTitle !== \"\") {\n            title += \" \" + opts.localeStrings.vs + \" \" + hAxisTitle;\n          }\n          groupByTitle = pivotData.rowAttrs.join(\"-\");\n          if (groupByTitle !== \"\") {\n            title += \" \" + opts.localeStrings.by + \" \" + groupByTitle;\n          }\n        }\n        options = {\n          title: title,\n          hAxis: {\n            title: hAxisTitle,\n            slantedText: numCharsInHAxis > 50\n          },\n          vAxis: {\n            title: vAxisTitle\n          },\n          tooltip: {\n            textStyle: {\n              fontName: 'Arial',\n              fontSize: 12\n            }\n          },\n          chartArea: {\n            'width': '80%',\n            'height': '80%'\n          }\n        };\n        if (chartType === \"ColumnChart\") {\n          options.vAxis.minValue = 0;\n        }\n        if (chartType === \"ScatterChart\") {\n          options.legend = {\n            position: \"none\"\n          };\n        } else if (dataArray[0].length === 2 && dataArray[0][1] === \"\") {\n          options.legend = {\n            position: \"none\"\n          };\n        }\n        $.extend(options, opts.gchart, extraOptions);\n        result = $(\"<div>\").css({\n          width: opts.gchart.width,\n          height: opts.gchart.height\n        });\n        wrapper = new google.visualization.ChartWrapper({\n          dataTable: dataTable,\n          chartType: chartType,\n          options: options\n        });\n        wrapper.draw(result[0]);\n        result.bind(\"dblclick\", function() {\n          var editor;\n          editor = new google.visualization.ChartEditor();\n          google.visualization.events.addListener(editor, 'ok', function() {\n            return editor.getChartWrapper().draw(result[0]);\n          });\n          return editor.openDialog(wrapper);\n        });\n        return returnObject = {\n          html: result\n        };\n      };\n    };\n    return gchart_renderers = {\n      \"Line Chart\": makeGoogleChart(\"LineChart\"),\n      \"Bar Chart\": makeGoogleChart(\"ColumnChart\"),\n      \"Stacked Bar Chart\": makeGoogleChart(\"ColumnChart\", {\n        isStacked: true\n      }),\n      \"Area Chart\": makeGoogleChart(\"AreaChart\", {\n        isStacked: true\n      }),\n      \"Scatter Chart\": makeGoogleChart(\"ScatterChart\")\n    };\n  });\n\n}).call(this);\n\n//# sourceMappingURL=gchart_renderers.js.map\n"],"sourceRoot":"/source/"}