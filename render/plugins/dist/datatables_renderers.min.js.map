{"version":3,"sources":["/source/datatables_renderers.coffee","datatables_renderers.min.js"],"names":["callWithJQuery","hasProp","hasOwnProperty","pivotModule","exports","module","require","define","amd","jQuery","$","datatable","datatables_renderers","pivotData","opts","aggregator","c","colAttrs","colKey","colKeys","defaults","i","j","r","result","rowAttrs","rowKey","rowKeys","spanSize","tbody","td","tfoot","th","thead","totalAggregator","tr","txt","val","x","localeStrings","totals","extend","getRowKeys","getColKeys","document","createElement","width","datatables","className","join","arr","k","l","len","noDraw","ref","ref1","stop","length","call","parseInt","setAttribute","appendChild","css","innerHTML","off","on","event","e","Event","renderingEngineId","window","trigger","getAggregator","value","format","fn","finalize","numCols","numFixedLeftCols","numRows","postRenderOpts","returnObject","scrollY","height","fixedColumns","leftColumns","rightColumns","scrollX","scrollCollapse","paging","keys","dom","buttons","html","this","type","postRenderFunction","DataTable","heatmap","scope","colorGen","heatmapper","data","color","min","max","hexGen","hex","intensity","Math","round","toString","split","_this","colorFor","forEachCell","values","f","find","each","isFinite","push","apply","elem","barchart","barcharter","scaler","text","wrapper","position","append","bottom","left","right","background-color","padding-left","padding-right","padding","padding-top","text-align","Table","pvtData","Table Barchart","Heatmap","Row Heatmap","Col Heatmap"],"mappings":"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","file":"datatables_renderers.min.js","sourcesContent":["###\r\n    Data Analytics Toolkit: Explore any data avaialable through a REST service \r\n    Copyright (C) 2016  Scott Aslan\r\n\r\n    This program is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Affero General Public License as\r\n    published by the Free Software Foundation, either version 3 of the\r\n    License, or (at your option) any later version.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU Affero General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Affero General Public License\r\n    along with this program.  If not, see <http://www.gnu.org/licenses/agpl.html>.\r\n###\r\ncallWithJQuery = (pivotModule) ->\r\n    if typeof exports is \"object\" and typeof module is \"object\" # CommonJS\r\n        pivotModule require(\"jquery\")\r\n    else if typeof define is \"function\" and define.amd # AMD\r\n        define [\"jquery\"], pivotModule\r\n    # Plain browser env\r\n    else\r\n        pivotModule jQuery\r\n        \r\ncallWithJQuery ($) ->\r\n    \r\n    datatable = (pivotData, opts) ->\r\n        defaults =\r\n            localeStrings:\r\n                totals: \"Totals\"\r\n\r\n        opts = $.extend defaults, opts\r\n\r\n        colAttrs = pivotData.colAttrs\r\n        rowAttrs = pivotData.rowAttrs\r\n        rowKeys = pivotData.getRowKeys()\r\n        colKeys = pivotData.getColKeys()\r\n\r\n        #now actually build the output\r\n        result = document.createElement(\"table\")\r\n        $(result).width(opts.datatables.width)\r\n        result.className = opts.datatables.class.join(\" \")\r\n        thead = document.createElement(\"thead\")\r\n        tbody = document.createElement(\"tbody\")\r\n        tfoot = document.createElement(\"tfoot\")\r\n\r\n        #helper function for setting row/col-span in pivotTableRenderer\r\n        spanSize = (arr, i, j) ->\r\n            if i != 0\r\n                noDraw = true\r\n                for x in [0..j]\r\n                    if arr[i-1][x] != arr[i][x]\r\n                        noDraw = false\r\n                if noDraw\r\n                  return -1 #do not draw cell\r\n            len = 0\r\n            while i+len < arr.length\r\n                stop = false\r\n                for x in [0..j]\r\n                    stop = true if arr[i][x] != arr[i+len][x]\r\n                break if stop\r\n                len++\r\n            return len\r\n\r\n        #the first few rows are for col headers\r\n        for own j, c of colAttrs\r\n            tr = document.createElement(\"tr\")\r\n            if parseInt(j) == 0 and rowAttrs.length != 0\r\n                th = document.createElement(\"th\")\r\n                th.setAttribute(\"colspan\", rowAttrs.length)\r\n                th.setAttribute(\"rowspan\", colAttrs.length)\r\n                tr.appendChild th\r\n            th = document.createElement(\"th\")\r\n            th.className = \"pvtAxisLabel\"\r\n            $(th).css(\"white-space\", \"nowrap\")\r\n            th.innerHTML = c\r\n            tr.appendChild th\r\n            for own i, colKey of colKeys\r\n                x = spanSize(colKeys, parseInt(i), parseInt(j))\r\n                if x != -1\r\n                    th = document.createElement(\"th\")\r\n                    $(th).off('dblclick').on 'dblclick', (event) ->\r\n                        # Create a new jQuery.Event object with specified event properties.\r\n                        e = $.Event( \"colLabelDrillDownEvent\", { event: event, renderingEngineId: opts.renderingEngineId } );\r\n                        $(window).trigger( e );\r\n                    th.className = \"pvtColLabel\"\r\n                    th.innerHTML = colKey[j]\r\n                    th.setAttribute(\"colspan\", x)\r\n                    if parseInt(j) == colAttrs.length-1 and rowAttrs.length != 0\r\n                        th.setAttribute(\"rowspan\", 2)\r\n                    tr.appendChild th\r\n            if parseInt(j) == 0\r\n                th = document.createElement(\"th\")\r\n                th.className = \"pvtTotalLabel\"\r\n                th.innerHTML = opts.localeStrings.totals\r\n                th.setAttribute(\"rowspan\", colAttrs.length + (if rowAttrs.length ==0 then 0 else 1))\r\n                tr.appendChild th\r\n            thead.appendChild tr\r\n\r\n        #then a row for row header headers\r\n        if rowAttrs.length !=0\r\n            tr = document.createElement(\"tr\")\r\n            for own i, r of rowAttrs\r\n                th = document.createElement(\"th\")\r\n                $(th).css(\"white-space\", \"nowrap\")\r\n                th.className = \"pvtAxisLabel\"\r\n                th.innerHTML = r\r\n                tr.appendChild th \r\n            th = document.createElement(\"th\")\r\n            if colAttrs.length ==0\r\n                th.className = \"pvtTotalLabel\"\r\n                th.innerHTML = opts.localeStrings.totals\r\n            tr.appendChild th\r\n            thead.appendChild tr\r\n\r\n        #now the actual data rows, with their row headers and totals\r\n        for own i, rowKey of rowKeys\r\n            tr = document.createElement(\"tr\")\r\n            for own j, txt of rowKey\r\n                th = document.createElement('th')\r\n                $(th).css(\"white-space\", \"nowrap\")\r\n                $(th).off('dblclick').on 'dblclick', (event) ->\r\n                    # Create a new jQuery.Event object with specified event properties.\r\n                    e = $.Event( \"rowLabelDrillDownEvent\", { event: event, renderingEngineId: opts.renderingEngineId } );\r\n                    $(window).trigger( e );\r\n                th.className = 'pvtRowLabel'\r\n                th.innerHTML = txt\r\n                tr.appendChild th\r\n                if parseInt(j) == rowAttrs.length-1 and colAttrs.length !=0\r\n                    tr.appendChild document.createElement('th')\r\n            for own j, colKey of colKeys #this is the tight loop\r\n                aggregator = pivotData.getAggregator(rowKey, colKey)\r\n                val = aggregator.value()\r\n                td = document.createElement(\"td\")\r\n                td.className = \"pvtVal row#{i} col#{j}\"\r\n                td.innerHTML = aggregator.format(val)\r\n                td.setAttribute(\"data-value\", val)\r\n                tr.appendChild td\r\n\r\n            totalAggregator = pivotData.getAggregator(rowKey, [])\r\n            val = totalAggregator.value()\r\n            td = document.createElement(\"td\")\r\n            td.className = \"pvtTotal rowTotal\"\r\n            td.innerHTML = totalAggregator.format(val)\r\n            td.setAttribute(\"data-value\", val)\r\n            td.setAttribute(\"data-for\", \"row\"+i)\r\n            tr.appendChild td\r\n            tbody.appendChild tr\r\n\r\n        #finally, the row for col totals, and a grand total\r\n        tr = document.createElement(\"tr\")\r\n        th = document.createElement(\"th\")\r\n        th.className = \"pvtTotalLabel\"\r\n        th.innerHTML = opts.localeStrings.totals\r\n        th.setAttribute(\"colspan\", rowAttrs.length + (if colAttrs.length == 0 then 0 else 1))\r\n        tr.appendChild th\r\n        for own j, colKey of colKeys\r\n            totalAggregator = pivotData.getAggregator([], colKey)\r\n            val = totalAggregator.value()\r\n            td = document.createElement(\"td\")\r\n            td.className = \"pvtTotal colTotal\"\r\n            td.innerHTML = totalAggregator.format(val)\r\n            td.setAttribute(\"data-value\", val)\r\n            td.setAttribute(\"data-for\", \"col\"+j)\r\n            tr.appendChild td\r\n        totalAggregator = pivotData.getAggregator([], [])\r\n        val = totalAggregator.value()\r\n        td = document.createElement('td')\r\n        td.className = 'pvtGrandTotal'\r\n        td.innerHTML = totalAggregator.format(val)\r\n        td.setAttribute(\"data-value\", val)\r\n        tr.appendChild td\r\n        result.appendChild thead\r\n        result.appendChild tbody\r\n        tfoot.appendChild tr\r\n        result.appendChild tfoot\r\n\r\n        #squirrel this away for later\r\n        result.setAttribute(\"data-numrows\", rowKeys.length)\r\n        result.setAttribute(\"data-numcols\", colKeys.length)\r\n\r\n        return result\r\n    \r\n    $.fn.finalize = (opts)  ->\r\n        numRows = opts.numRows\r\n        numCols = opts.numCols\r\n        \r\n        numFixedLeftCols = numRows\r\n        if numCols > 0\r\n          numFixedLeftCols = numFixedLeftCols + 1\r\n            \r\n        postRenderOpts = \r\n          scrollY: opts['datatables'].height\r\n          fixedColumns:\r\n            leftColumns: numFixedLeftCols\r\n            rightColumns: 1\r\n          scrollX: true\r\n          scrollCollapse: true\r\n          paging: false\r\n          keys: true\r\n          dom: 'Bfrtip'\r\n          buttons: [\r\n            'csvHtml5'\r\n            'pdfHtml5'\r\n            'print'\r\n          ]\r\n    \r\n        if numRows != 0 or numCols != 0\r\n            return returnObject = \r\n                html: this.width('100%') #DataTables needs the table to be 100% wide\r\n                type: 'datatables'\r\n                postRenderOpts: postRenderOpts\r\n                postRenderFunction: (html, opts) ->\r\n                    $(html).DataTable(opts)\r\n                    return\r\n        \r\n        return returnObject = \r\n                html: this\r\n                type: 'datatables'\r\n    \r\n    \r\n    ###\r\n    Heatmap post-processing\r\n    ###\r\n\r\n    $.fn.heatmap = (scope = \"heatmap\") ->\r\n        numRows = @data \"numrows\"\r\n        numCols = @data \"numcols\"\r\n\r\n        colorGen = (color, min, max) ->\r\n            hexGen = switch color\r\n                when \"red\"   then (hex) -> \"ff#{hex}#{hex}\"\r\n                when \"green\" then (hex) -> \"#{hex}ff#{hex}\"\r\n                when \"blue\"  then (hex) -> \"#{hex}#{hex}ff\"\r\n\r\n            return (x) ->\r\n                intensity = 255 - Math.round 255*(x-min)/(max-min)\r\n                hex = intensity.toString(16).split(\".\")[0]\r\n                hex = 0+hex if hex.length == 1\r\n                return hexGen(hex)\r\n\r\n        heatmapper = (scope, color) =>\r\n            forEachCell = (f) =>\r\n                @find(scope).each ->\r\n                    x = $(this).data(\"value\")\r\n                    f(x, $(this)) if x? and isFinite(x)\r\n\r\n            values = []\r\n            forEachCell (x) -> values.push x\r\n            colorFor = colorGen color, Math.min(values...), Math.max(values...)\r\n            forEachCell (x, elem) -> elem.css \"background-color\", \"#\" + colorFor(x)\r\n\r\n        switch scope\r\n            when \"heatmap\"\r\n                heatmapper \".pvtVal\", \"red\"\r\n            when \"rowheatmap\"\r\n                heatmapper \".pvtVal.row#{i}\", \"red\" for i in [0...numRows]\r\n            when \"colheatmap\"\r\n                heatmapper \".pvtVal.col#{j}\", \"red\" for j in [0...numCols]\r\n\r\n        heatmapper \".pvtTotal.rowTotal\", \"red\"\r\n        heatmapper \".pvtTotal.colTotal\", \"red\"\r\n\r\n        return this\r\n\r\n    ###\r\n    Barchart post-processing\r\n    ###\r\n\r\n    $.fn.barchart =  ->\r\n        numRows = @data \"numrows\"\r\n        numCols = @data \"numcols\"\r\n\r\n        barcharter = (scope) =>\r\n            forEachCell = (f) =>\r\n                @find(scope).each ->\r\n                    x = $(this).data(\"value\")\r\n                    f(x, $(this)) if x? and isFinite(x)\r\n\r\n            values = []\r\n            forEachCell (x) -> values.push x\r\n            max = Math.max(values...)\r\n            scaler = (x) -> 100*x/(1.4*max)\r\n            forEachCell (x, elem) ->\r\n                text = elem.text()\r\n                wrapper = $(\"<div>\").css\r\n                    \"position\": \"relative\"\r\n                wrapper.append $(\"<div>\").css\r\n                    \"position\": \"absolute\"\r\n                    \"bottom\": -2\r\n                    \"left\": 0\r\n                    \"right\": 0\r\n                    \"height\": scaler(x) + \"%\"\r\n                    \"background-color\": \"gray\"\r\n                wrapper.append $(\"<div>\").text(text).css\r\n                    \"position\":\"relative\"\r\n                    \"padding-left\":\"5px\"\r\n                    \"padding-right\":\"5px\"\r\n\r\n                elem.css(\"padding\": 0,\"padding-top\": \"5px\", \"text-align\": \"center\").html wrapper\r\n\r\n        barcharter \".pvtVal.row#{i}\" for i in [0...numRows]\r\n        barcharter \".pvtTotal.colTotal\"\r\n\r\n        return this\r\n    \r\n    datatables_renderers =\r\n        \"Table\":          (pvtData, opts) ->   $(datatable(pvtData, opts)).finalize(opts)\r\n        \"Table Barchart\": (pvtData, opts) -> $(datatable(pvtData, opts)).barchart().finalize(opts)\r\n        \"Heatmap\":        (pvtData, opts) -> $(datatable(pvtData, opts)).heatmap().finalize(opts)\r\n        \"Row Heatmap\":    (pvtData, opts) -> $(datatable(pvtData, opts)).heatmap(\"rowheatmap\").finalize(opts)\r\n        \"Col Heatmap\":    (pvtData, opts) -> $(datatable(pvtData, opts)).heatmap(\"colheatmap\").finalize(opts)","\n/*\n    Data Analytics Toolkit: Explore any data avaialable through a REST service \n    Copyright (C) 2016  Scott Aslan\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as\n    published by the Free Software Foundation, either version 3 of the\n    License, or (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/agpl.html>.\n */\n\n(function() {\n  var callWithJQuery,\n    hasProp = {}.hasOwnProperty;\n\n  callWithJQuery = function(pivotModule) {\n    if (typeof exports === \"object\" && typeof module === \"object\") {\n      return pivotModule(require(\"jquery\"));\n    } else if (typeof define === \"function\" && define.amd) {\n      return define([\"jquery\"], pivotModule);\n    } else {\n      return pivotModule(jQuery);\n    }\n  };\n\n  callWithJQuery(function($) {\n    var datatable, datatables_renderers;\n    datatable = function(pivotData, opts) {\n      var aggregator, c, colAttrs, colKey, colKeys, defaults, i, j, r, result, rowAttrs, rowKey, rowKeys, spanSize, tbody, td, tfoot, th, thead, totalAggregator, tr, txt, val, x;\n      defaults = {\n        localeStrings: {\n          totals: \"Totals\"\n        }\n      };\n      opts = $.extend(defaults, opts);\n      colAttrs = pivotData.colAttrs;\n      rowAttrs = pivotData.rowAttrs;\n      rowKeys = pivotData.getRowKeys();\n      colKeys = pivotData.getColKeys();\n      result = document.createElement(\"table\");\n      $(result).width(opts.datatables.width);\n      result.className = opts.datatables[\"class\"].join(\" \");\n      thead = document.createElement(\"thead\");\n      tbody = document.createElement(\"tbody\");\n      tfoot = document.createElement(\"tfoot\");\n      spanSize = function(arr, i, j) {\n        var k, l, len, noDraw, ref, ref1, stop, x;\n        if (i !== 0) {\n          noDraw = true;\n          for (x = k = 0, ref = j; 0 <= ref ? k <= ref : k >= ref; x = 0 <= ref ? ++k : --k) {\n            if (arr[i - 1][x] !== arr[i][x]) {\n              noDraw = false;\n            }\n          }\n          if (noDraw) {\n            return -1;\n          }\n        }\n        len = 0;\n        while (i + len < arr.length) {\n          stop = false;\n          for (x = l = 0, ref1 = j; 0 <= ref1 ? l <= ref1 : l >= ref1; x = 0 <= ref1 ? ++l : --l) {\n            if (arr[i][x] !== arr[i + len][x]) {\n              stop = true;\n            }\n          }\n          if (stop) {\n            break;\n          }\n          len++;\n        }\n        return len;\n      };\n      for (j in colAttrs) {\n        if (!hasProp.call(colAttrs, j)) continue;\n        c = colAttrs[j];\n        tr = document.createElement(\"tr\");\n        if (parseInt(j) === 0 && rowAttrs.length !== 0) {\n          th = document.createElement(\"th\");\n          th.setAttribute(\"colspan\", rowAttrs.length);\n          th.setAttribute(\"rowspan\", colAttrs.length);\n          tr.appendChild(th);\n        }\n        th = document.createElement(\"th\");\n        th.className = \"pvtAxisLabel\";\n        $(th).css(\"white-space\", \"nowrap\");\n        th.innerHTML = c;\n        tr.appendChild(th);\n        for (i in colKeys) {\n          if (!hasProp.call(colKeys, i)) continue;\n          colKey = colKeys[i];\n          x = spanSize(colKeys, parseInt(i), parseInt(j));\n          if (x !== -1) {\n            th = document.createElement(\"th\");\n            $(th).off('dblclick').on('dblclick', function(event) {\n              var e;\n              e = $.Event(\"colLabelDrillDownEvent\", {\n                event: event,\n                renderingEngineId: opts.renderingEngineId\n              });\n              return $(window).trigger(e);\n            });\n            th.className = \"pvtColLabel\";\n            th.innerHTML = colKey[j];\n            th.setAttribute(\"colspan\", x);\n            if (parseInt(j) === colAttrs.length - 1 && rowAttrs.length !== 0) {\n              th.setAttribute(\"rowspan\", 2);\n            }\n            tr.appendChild(th);\n          }\n        }\n        if (parseInt(j) === 0) {\n          th = document.createElement(\"th\");\n          th.className = \"pvtTotalLabel\";\n          th.innerHTML = opts.localeStrings.totals;\n          th.setAttribute(\"rowspan\", colAttrs.length + (rowAttrs.length === 0 ? 0 : 1));\n          tr.appendChild(th);\n        }\n        thead.appendChild(tr);\n      }\n      if (rowAttrs.length !== 0) {\n        tr = document.createElement(\"tr\");\n        for (i in rowAttrs) {\n          if (!hasProp.call(rowAttrs, i)) continue;\n          r = rowAttrs[i];\n          th = document.createElement(\"th\");\n          $(th).css(\"white-space\", \"nowrap\");\n          th.className = \"pvtAxisLabel\";\n          th.innerHTML = r;\n          tr.appendChild(th);\n        }\n        th = document.createElement(\"th\");\n        if (colAttrs.length === 0) {\n          th.className = \"pvtTotalLabel\";\n          th.innerHTML = opts.localeStrings.totals;\n        }\n        tr.appendChild(th);\n        thead.appendChild(tr);\n      }\n      for (i in rowKeys) {\n        if (!hasProp.call(rowKeys, i)) continue;\n        rowKey = rowKeys[i];\n        tr = document.createElement(\"tr\");\n        for (j in rowKey) {\n          if (!hasProp.call(rowKey, j)) continue;\n          txt = rowKey[j];\n          th = document.createElement('th');\n          $(th).css(\"white-space\", \"nowrap\");\n          $(th).off('dblclick').on('dblclick', function(event) {\n            var e;\n            e = $.Event(\"rowLabelDrillDownEvent\", {\n              event: event,\n              renderingEngineId: opts.renderingEngineId\n            });\n            return $(window).trigger(e);\n          });\n          th.className = 'pvtRowLabel';\n          th.innerHTML = txt;\n          tr.appendChild(th);\n          if (parseInt(j) === rowAttrs.length - 1 && colAttrs.length !== 0) {\n            tr.appendChild(document.createElement('th'));\n          }\n        }\n        for (j in colKeys) {\n          if (!hasProp.call(colKeys, j)) continue;\n          colKey = colKeys[j];\n          aggregator = pivotData.getAggregator(rowKey, colKey);\n          val = aggregator.value();\n          td = document.createElement(\"td\");\n          td.className = \"pvtVal row\" + i + \" col\" + j;\n          td.innerHTML = aggregator.format(val);\n          td.setAttribute(\"data-value\", val);\n          tr.appendChild(td);\n        }\n        totalAggregator = pivotData.getAggregator(rowKey, []);\n        val = totalAggregator.value();\n        td = document.createElement(\"td\");\n        td.className = \"pvtTotal rowTotal\";\n        td.innerHTML = totalAggregator.format(val);\n        td.setAttribute(\"data-value\", val);\n        td.setAttribute(\"data-for\", \"row\" + i);\n        tr.appendChild(td);\n        tbody.appendChild(tr);\n      }\n      tr = document.createElement(\"tr\");\n      th = document.createElement(\"th\");\n      th.className = \"pvtTotalLabel\";\n      th.innerHTML = opts.localeStrings.totals;\n      th.setAttribute(\"colspan\", rowAttrs.length + (colAttrs.length === 0 ? 0 : 1));\n      tr.appendChild(th);\n      for (j in colKeys) {\n        if (!hasProp.call(colKeys, j)) continue;\n        colKey = colKeys[j];\n        totalAggregator = pivotData.getAggregator([], colKey);\n        val = totalAggregator.value();\n        td = document.createElement(\"td\");\n        td.className = \"pvtTotal colTotal\";\n        td.innerHTML = totalAggregator.format(val);\n        td.setAttribute(\"data-value\", val);\n        td.setAttribute(\"data-for\", \"col\" + j);\n        tr.appendChild(td);\n      }\n      totalAggregator = pivotData.getAggregator([], []);\n      val = totalAggregator.value();\n      td = document.createElement('td');\n      td.className = 'pvtGrandTotal';\n      td.innerHTML = totalAggregator.format(val);\n      td.setAttribute(\"data-value\", val);\n      tr.appendChild(td);\n      result.appendChild(thead);\n      result.appendChild(tbody);\n      tfoot.appendChild(tr);\n      result.appendChild(tfoot);\n      result.setAttribute(\"data-numrows\", rowKeys.length);\n      result.setAttribute(\"data-numcols\", colKeys.length);\n      return result;\n    };\n    $.fn.finalize = function(opts) {\n      var numCols, numFixedLeftCols, numRows, postRenderOpts, returnObject;\n      numRows = opts.numRows;\n      numCols = opts.numCols;\n      numFixedLeftCols = numRows;\n      if (numCols > 0) {\n        numFixedLeftCols = numFixedLeftCols + 1;\n      }\n      postRenderOpts = {\n        scrollY: opts['datatables'].height,\n        fixedColumns: {\n          leftColumns: numFixedLeftCols,\n          rightColumns: 1\n        },\n        scrollX: true,\n        scrollCollapse: true,\n        paging: false,\n        keys: true,\n        dom: 'Bfrtip',\n        buttons: ['csvHtml5', 'pdfHtml5', 'print']\n      };\n      if (numRows !== 0 || numCols !== 0) {\n        return returnObject = {\n          html: this.width('100%'),\n          type: 'datatables',\n          postRenderOpts: postRenderOpts,\n          postRenderFunction: function(html, opts) {\n            $(html).DataTable(opts);\n          }\n        };\n      }\n      return returnObject = {\n        html: this,\n        type: 'datatables'\n      };\n    };\n\n    /*\n    Heatmap post-processing\n     */\n    $.fn.heatmap = function(scope) {\n      var colorGen, heatmapper, i, j, k, l, numCols, numRows, ref, ref1;\n      if (scope == null) {\n        scope = \"heatmap\";\n      }\n      numRows = this.data(\"numrows\");\n      numCols = this.data(\"numcols\");\n      colorGen = function(color, min, max) {\n        var hexGen;\n        hexGen = (function() {\n          switch (color) {\n            case \"red\":\n              return function(hex) {\n                return \"ff\" + hex + hex;\n              };\n            case \"green\":\n              return function(hex) {\n                return hex + \"ff\" + hex;\n              };\n            case \"blue\":\n              return function(hex) {\n                return \"\" + hex + hex + \"ff\";\n              };\n          }\n        })();\n        return function(x) {\n          var hex, intensity;\n          intensity = 255 - Math.round(255 * (x - min) / (max - min));\n          hex = intensity.toString(16).split(\".\")[0];\n          if (hex.length === 1) {\n            hex = 0 + hex;\n          }\n          return hexGen(hex);\n        };\n      };\n      heatmapper = (function(_this) {\n        return function(scope, color) {\n          var colorFor, forEachCell, values;\n          forEachCell = function(f) {\n            return _this.find(scope).each(function() {\n              var x;\n              x = $(this).data(\"value\");\n              if ((x != null) && isFinite(x)) {\n                return f(x, $(this));\n              }\n            });\n          };\n          values = [];\n          forEachCell(function(x) {\n            return values.push(x);\n          });\n          colorFor = colorGen(color, Math.min.apply(Math, values), Math.max.apply(Math, values));\n          return forEachCell(function(x, elem) {\n            return elem.css(\"background-color\", \"#\" + colorFor(x));\n          });\n        };\n      })(this);\n      switch (scope) {\n        case \"heatmap\":\n          heatmapper(\".pvtVal\", \"red\");\n          break;\n        case \"rowheatmap\":\n          for (i = k = 0, ref = numRows; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {\n            heatmapper(\".pvtVal.row\" + i, \"red\");\n          }\n          break;\n        case \"colheatmap\":\n          for (j = l = 0, ref1 = numCols; 0 <= ref1 ? l < ref1 : l > ref1; j = 0 <= ref1 ? ++l : --l) {\n            heatmapper(\".pvtVal.col\" + j, \"red\");\n          }\n      }\n      heatmapper(\".pvtTotal.rowTotal\", \"red\");\n      heatmapper(\".pvtTotal.colTotal\", \"red\");\n      return this;\n    };\n\n    /*\n    Barchart post-processing\n     */\n    $.fn.barchart = function() {\n      var barcharter, i, k, numCols, numRows, ref;\n      numRows = this.data(\"numrows\");\n      numCols = this.data(\"numcols\");\n      barcharter = (function(_this) {\n        return function(scope) {\n          var forEachCell, max, scaler, values;\n          forEachCell = function(f) {\n            return _this.find(scope).each(function() {\n              var x;\n              x = $(this).data(\"value\");\n              if ((x != null) && isFinite(x)) {\n                return f(x, $(this));\n              }\n            });\n          };\n          values = [];\n          forEachCell(function(x) {\n            return values.push(x);\n          });\n          max = Math.max.apply(Math, values);\n          scaler = function(x) {\n            return 100 * x / (1.4 * max);\n          };\n          return forEachCell(function(x, elem) {\n            var text, wrapper;\n            text = elem.text();\n            wrapper = $(\"<div>\").css({\n              \"position\": \"relative\"\n            });\n            wrapper.append($(\"<div>\").css({\n              \"position\": \"absolute\",\n              \"bottom\": -2,\n              \"left\": 0,\n              \"right\": 0,\n              \"height\": scaler(x) + \"%\",\n              \"background-color\": \"gray\"\n            }));\n            wrapper.append($(\"<div>\").text(text).css({\n              \"position\": \"relative\",\n              \"padding-left\": \"5px\",\n              \"padding-right\": \"5px\"\n            }));\n            return elem.css({\n              \"padding\": 0,\n              \"padding-top\": \"5px\",\n              \"text-align\": \"center\"\n            }).html(wrapper);\n          });\n        };\n      })(this);\n      for (i = k = 0, ref = numRows; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {\n        barcharter(\".pvtVal.row\" + i);\n      }\n      barcharter(\".pvtTotal.colTotal\");\n      return this;\n    };\n    return datatables_renderers = {\n      \"Table\": function(pvtData, opts) {\n        return $(datatable(pvtData, opts)).finalize(opts);\n      },\n      \"Table Barchart\": function(pvtData, opts) {\n        return $(datatable(pvtData, opts)).barchart().finalize(opts);\n      },\n      \"Heatmap\": function(pvtData, opts) {\n        return $(datatable(pvtData, opts)).heatmap().finalize(opts);\n      },\n      \"Row Heatmap\": function(pvtData, opts) {\n        return $(datatable(pvtData, opts)).heatmap(\"rowheatmap\").finalize(opts);\n      },\n      \"Col Heatmap\": function(pvtData, opts) {\n        return $(datatable(pvtData, opts)).heatmap(\"colheatmap\").finalize(opts);\n      }\n    };\n  });\n\n}).call(this);\n\n//# sourceMappingURL=datatables_renderers.js.map\n"],"sourceRoot":"/source/"}