{"version":3,"sources":["ngchart_directive_renderers.min.js"],"names":["callWithJQuery","factory","exports","module","require","define","amd","undefined","window","ngRNDR","plugins","renderers","$","extend","jQuery","makeGoogleChart","ngchart_directive_renderers","chartType","extraOptions","pivotData","opts","agg","base","base1","colKey","colKeys","dataArray","dataTable","defaults","fullAggName","groupByTitle","h","hAxisTitle","headers","i","j","len","len1","numCharsInHAxis","options","ref","result","row","rowKey","rowKeys","title","tree2","vAxisTitle","val","x","y","localeStrings","vs","by","gchart","width","innerWidth","height","innerHeight","getRowKeys","length","push","getColKeys","meta","aggregatorName","valAttrs","join","results","unshift","tree","parseFloat","format","value","google","visualization","DataTable","addColumn","colAttrs","rowAttrs","type","role","addRows","getAggregator","isNumeric","toPrecision","toFixed","arrayToDataTable","hAxis","slantedText","vAxis","tooltip","textStyle","fontName","fontSize","minValue","legend","position","chartArea","html","isDirective","chart","data","Line Chart","Bar Chart","Stacked Bar Chart","isStacked","Area Chart","Scatter Chart","call","this"],"mappings":"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","file":"ngchart_directive_renderers.min.js","sourcesContent":["(function() {\n    var callWithJQuery;\n\n    callWithJQuery = function(factory) {\n        if (typeof exports === \"object\" && typeof module === \"object\") {\n            return factory(require(\"jquery\"));\n        } else if (typeof define === \"function\" && define.amd) {\n            return define([\"jquery\"], factory);\n        } else {\n            if (window.ngRNDR === undefined) {\n                window.ngRNDR = {};\n                if (window.ngRNDR.plugins === undefined) {\n                    window.ngRNDR.plugins = {};\n                    if (window.ngRNDR.plugins.renderers === undefined) {\n                        window.ngRNDR.plugins.renderers = {};\n                    }\n                }\n            }\n            window.ngRNDR.plugins.renderers = $.extend({}, window.ngRNDR.plugins.renderers, factory(jQuery));\n            return window.ngRNDR.plugins.renderers;\n        }\n    };\n\n    callWithJQuery(function($) {\n        var makeGoogleChart, ngchart_directive_renderers;\n        makeGoogleChart = function(chartType, extraOptions) {\n            return function(pivotData, opts) {\n                var agg, base, base1, colKey, colKeys, dataArray, dataTable, defaults, fullAggName, groupByTitle, h, hAxisTitle, headers, i, j, len, len1, numCharsInHAxis, options, ref, result, row, rowKey, rowKeys, title, tree2, vAxisTitle, val, x, y;\n                defaults = {\n                    localeStrings: {\n                        vs: \"vs\",\n                        by: \"by\"\n                    },\n                    gchart: {}\n                };\n                opts = $.extend(true, defaults, opts);\n                if ((base = opts.gchart).width == null) {\n                    base.width = window.innerWidth / 1.4;\n                }\n                if ((base1 = opts.gchart).height == null) {\n                    base1.height = window.innerHeight / 1.4;\n                }\n                rowKeys = pivotData.getRowKeys();\n                if (rowKeys.length === 0) {\n                    rowKeys.push([]);\n                }\n                colKeys = pivotData.getColKeys();\n                if (colKeys.length === 0) {\n                    colKeys.push([]);\n                }\n                fullAggName = pivotData.meta.aggregatorName;\n                if (pivotData.meta.valAttrs.length) {\n                    fullAggName += \"(\" + (pivotData.meta.valAttrs.join(\", \")) + \")\";\n                }\n                headers = (function() {\n                    var i, len, results;\n                    results = [];\n                    for (i = 0, len = rowKeys.length; i < len; i++) {\n                        h = rowKeys[i];\n                        results.push(h.join(\"-\"));\n                    }\n                    return results;\n                })();\n                headers.unshift(\"\");\n                numCharsInHAxis = 0;\n                if (chartType === \"ScatterChart\") {\n                    dataArray = [];\n                    ref = pivotData.meta.tree;\n                    for (y in ref) {\n                        tree2 = ref[y];\n                        for (x in tree2) {\n                            agg = tree2[x];\n                            dataArray.push([parseFloat(x), parseFloat(y), fullAggName + \": \\n\" + agg.format(agg.value())]);\n                        }\n                    }\n                    dataTable = new google.visualization.DataTable();\n                    dataTable.addColumn('number', pivotData.meta.colAttrs.join(\"-\"));\n                    dataTable.addColumn('number', pivotData.meta.rowAttrs.join(\"-\"));\n                    dataTable.addColumn({\n                        type: \"string\",\n                        role: \"tooltip\"\n                    });\n                    dataTable.addRows(dataArray);\n                    hAxisTitle = pivotData.meta.colAttrs.join(\"-\");\n                    vAxisTitle = pivotData.meta.rowAttrs.join(\"-\");\n                    title = \"\";\n                } else {\n                    dataArray = [headers];\n                    for (i = 0, len = colKeys.length; i < len; i++) {\n                        colKey = colKeys[i];\n                        row = [colKey.join(\"-\")];\n                        numCharsInHAxis += row[0].length;\n                        for (j = 0, len1 = rowKeys.length; j < len1; j++) {\n                            rowKey = rowKeys[j];\n                            agg = pivotData.getAggregator(rowKey, colKey);\n                            if (agg.value() != null) {\n                                val = agg.value();\n                                if ($.isNumeric(val)) {\n                                    if (val < 1) {\n                                        row.push(parseFloat(val.toPrecision(3)));\n                                    } else {\n                                        row.push(parseFloat(val.toFixed(3)));\n                                    }\n                                } else {\n                                    row.push(val);\n                                }\n                            } else {\n                                row.push(null);\n                            }\n                        }\n                        dataArray.push(row);\n                    }\n                    dataTable = google.visualization.arrayToDataTable(dataArray);\n                    title = vAxisTitle = fullAggName;\n                    hAxisTitle = pivotData.meta.colAttrs.join(\"-\");\n                    if (hAxisTitle !== \"\") {\n                        title += \" \" + opts.localeStrings.vs + \" \" + hAxisTitle;\n                    }\n                    groupByTitle = pivotData.meta.rowAttrs.join(\"-\");\n                    if (groupByTitle !== \"\") {\n                        title += \" \" + opts.localeStrings.by + \" \" + groupByTitle;\n                    }\n                }\n                options = {\n                    title: title,\n                    hAxis: {\n                        title: hAxisTitle,\n                        slantedText: numCharsInHAxis > 50\n                    },\n                    vAxis: {\n                        title: vAxisTitle\n                    },\n                    tooltip: {\n                        textStyle: {\n                            fontName: 'Arial',\n                            fontSize: 12\n                        }\n                    }\n                };\n                if (chartType === \"ColumnChart\") {\n                    options.vAxis.minValue = 0;\n                }\n                if (chartType === \"ScatterChart\") {\n                    options.legend = {\n                        position: \"none\"\n                    };\n                    options.chartArea = {\n                        'width': '80%',\n                        'height': '80%'\n                    };\n                } else if (dataArray[0].length === 2 && dataArray[0][1] === \"\") {\n                    options.legend = {\n                        position: \"none\"\n                    };\n                }\n                $.extend(options, opts.gchart, extraOptions);\n                result = {\n                    html: '<div google-chart chart=\\'chartData\\'>',\n                    isDirective: true,\n                    chart: {\n                        data: dataArray,\n                        options: options,\n                        type: chartType\n                    }\n                };\n                return result;\n            };\n        };\n        return ngchart_directive_renderers = {\n            \"Line Chart\": makeGoogleChart(\"LineChart\"),\n            \"Bar Chart\": makeGoogleChart(\"ColumnChart\"),\n            \"Stacked Bar Chart\": makeGoogleChart(\"ColumnChart\", {\n                isStacked: true\n            }),\n            \"Area Chart\": makeGoogleChart(\"AreaChart\", {\n                isStacked: true\n            }),\n            \"Scatter Chart\": makeGoogleChart(\"ScatterChart\")\n        };\n    });\n\n}).call(this);\n\n//# sourceMappingURL=ngchart_directive_renderers.js.map\n\n//# sourceMappingURL=ngchart_directive_renderers.js.map\n"],"sourceRoot":"/source/"}