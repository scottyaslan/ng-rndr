{"version":3,"names":[],"mappings":"","sources":["d3_renderers.js"],"sourcesContent":["(function() {\n\n  var callWithJQuery;\n\n  callWithJQuery = function(factory) {\n    if (typeof exports === \"object\" && typeof module === \"object\") {\n      return factory(require(\"jquery\"), require(\"d3\"));\n    } else if (typeof define === \"function\" && define.amd) {\n      return define([\"jquery\", \"d3\"], factory);\n    } else {\n      if(window.ngRNDR === undefined){\n        window.ngRNDR = {};\n        if(window.ngRNDR.plugins === undefined){\n          window.ngRNDR.plugins = {};\n          if(window.ngRNDR.plugins.renderers === undefined){\n            window.ngRNDR.plugins.renderers = {};\n          }\n        }\n      }\n      window.ngRNDR.plugins.renderers = $.extend({}, window.ngRNDR.plugins.renderers, factory(jQuery, d3));\n      return window.ngRNDR.plugins.renderers;\n    }\n  };\n\n  callWithJQuery(function($, d3) {\n    var d3_renderers;\n    return d3_renderers = {\n      Treemap: function(pivotData, opts) {\n        var addToTree, color, defaults, height, i, len, ref, result, returnObject, rowKey, tree, treemap, value, width;\n        defaults = {\n          localeStrings: {},\n          d3: {\n            width: function() {\n              return opts.height + opts.heightOffset;\n            },\n            height: function() {\n              return opts.width + opts.widthOffset;\n            }\n          }\n        };\n        opts = $.extend(defaults, opts);\n        result = $(\"<div>\").css({\n          width: opts.d3.width(),\n          height: opts.d3.height()\n        });\n        tree = {\n          name: \"All\",\n          children: []\n        };\n        addToTree = function(tree, path, value) {\n          var child, i, len, newChild, ref, x;\n          if (path.length === 0) {\n            tree.value = value;\n            return;\n          }\n          if (tree.children == null) {\n            tree.children = [];\n          }\n          x = path.shift();\n          ref = tree.children;\n          for (i = 0, len = ref.length; i < len; i++) {\n            child = ref[i];\n            if (!(child.name === x)) {\n              continue;\n            }\n            addToTree(child, path, value);\n            return;\n          }\n          newChild = {\n            name: x\n          };\n          addToTree(newChild, path, value);\n          return tree.children.push(newChild);\n        };\n        ref = pivotData.getRowKeys();\n        for (i = 0, len = ref.length; i < len; i++) {\n          rowKey = ref[i];\n          value = pivotData.getAggregator(rowKey, []).value();\n          if (value != null) {\n            addToTree(tree, rowKey, value);\n          }\n        }\n        color = d3.scale.category10();\n        width = opts.d3.width();\n        height = opts.d3.height();\n        treemap = d3.layout.treemap().size([width, height]).sticky(true).value(function(d) {\n          return d.size;\n        });\n        d3.select(result[0]).append(\"div\").style(\"position\", \"relative\").style(\"width\", width + \"px\").style(\"height\", height + \"px\").datum(tree).selectAll(\".node\").data(treemap.padding([15, 0, 0, 0]).value(function(d) {\n          return d.value;\n        }).nodes).enter().append(\"div\").attr(\"class\", \"node\").style(\"background\", function(d) {\n          if (d.children != null) {\n            return \"lightgrey\";\n          } else {\n            return color(d.name);\n          }\n        }).text(function(d) {\n          return d.name;\n        }).call(function() {\n          this.style(\"left\", function(d) {\n            return d.x + \"px\";\n          }).style(\"top\", function(d) {\n            return d.y + \"px\";\n          }).style(\"width\", function(d) {\n            return Math.max(0, d.dx - 1) + \"px\";\n          }).style(\"height\", function(d) {\n            return Math.max(0, d.dy - 1) + \"px\";\n          });\n        });\n        return returnObject = {\n          html: result\n        };\n      }\n    };\n  });\n\n}).call(this);\n\n//# sourceMappingURL=d3_renderers.js.map\n"],"file":"d3_renderers.js","sourceRoot":"/source/"}